(self.webpackChunkmatTable=self.webpackChunkmatTable||[]).push([[32],{6032:(e,l,a)=>{"use strict";a.r(l),a.d(l,{MatTableExtApiComponent:()=>U,MatTableExtExampleModule:()=>Ks,MatTableExtOverviewComponent:()=>q,TranslateHttpLoaderFactory:()=>P});var o=a(3081),L=a(5601),R=a(529);class O{constructor(r,n="/assets/i18n/",p=".json"){this.http=r,this.prefix=n,this.suffix=p}getTranslation(r){return this.http.get(`${this.prefix}${r}${this.suffix}`)}}var T=a(9299);const j=[{position:1,name:"Boron",weight:10.811,symbol:"B",gender:"male",mobile:"13198765432",tele:"567891234",city:"Berlin",address:"Bernauer Str.111,13355",date:"1423456765768",website:"www.matero.com",company:"matero",email:"Boron@gmail.com",status:!1,cost:4},{position:2,name:"Helium",weight:8.0026,symbol:"He",gender:"female",mobile:"13034676675",tele:"80675432",city:"Shanghai",address:"88 Songshan Road",date:"1423456765768",website:"www.matero.com",company:"matero",email:"Helium@gmail.com",status:!0,cost:5},{position:3,name:"Nitrogen",weight:14.0067,symbol:"N",gender:"male",mobile:"15811112222",tele:"345678912",city:"Sydney",address:"Circular Quay, Sydney NSW 2000",date:"1423456765768",website:"www.matero.com",company:"matero",email:"Nitrogen@gmail.com",status:!0,cost:2}],M=[{position:1,name:"Boron",weight:10.811,symbol:"B",gender:"male",mobile:"13198765432",tele:"567891234",city:"Berlin",address:"Bernauer Str.111,13355",date:"1423456765768",website:"www.matero.com",company:"matero",email:"Boron@gmail.com",status:!1,cost:4},{position:2,name:"Helium",weight:8.0026,symbol:"He",gender:"female",mobile:"13034676675",tele:"80675432",city:"Shanghai",address:"88 Songshan Road",date:"1423456765768",website:"www.matero.com",company:"matero",email:"Helium@gmail.com",status:!0,cost:5},{position:3,name:"Nitrogen",weight:14.0067,symbol:"N",gender:"male",mobile:"15811112222",tele:"345678912",city:"Sydney",address:"Circular Quay, Sydney NSW 2000",date:"1423456765768",website:"www.matero.com",company:"matero",email:"Nitrogen@gmail.com",status:!0,cost:2}],X=[{position:1,name:"Hydrogen",weight:1.0079,symbol:"H"},{position:2,name:"Helium",weight:4.0026,symbol:"He"},{position:3,name:"Lithium",weight:6.941,symbol:"Li"},{position:4,name:"Beryllium",weight:9.0122,symbol:"Be"},{position:5,name:"Boron",weight:10.811,symbol:"B"},{position:6,name:"Carbon",weight:12.0107,symbol:"C"},{position:7,name:"Nitrogen",weight:14.0067,symbol:"N"},{position:8,name:"Oxygen",weight:15.9994,symbol:"O"},{position:9,name:"Fluorine",weight:18.9984,symbol:"F"},{position:10,name:"Neon",weight:20.1797,symbol:"Ne"}];var m=a(3626),s=a(4650),g=a(1886);const F={title:"Basic",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"number"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"},{header:"Date",field:"date",type:"date"}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:2,consts:[[3,"dataSource","columns"]],template:function(n,p){1&n&&(s.TgZ(0,"p"),s._uU(1,"This is a basic table extension example."),s.qZA(),s._UZ(2,"mat-table-ext",0)),2&n&&(s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns))},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(3472),filecontent:a(4336)},{file:"app.component.ts",content:a(4048),filecontent:a(962)},{file:"app.component.scss",content:a(9805),filecontent:a(6223)}]};var d=a(4006),f=a(6709);const N=function(){return[3,10,15]},W={title:"Column resize",description:"<p>Turn the checkbox on to test the Column Resizing</p>",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",minWidth:"200px",maxWidth:"300px",type:"string"},{header:"Weight",field:"weight",minWidth:"200px",type:"string"},{header:"Gender",field:"gender",width:"100px",resizable:!1,type:"string"},{header:"Mobile",field:"mobile",maxWidth:"px",type:"string"},{header:"City",field:"city",minWidth:"200px",type:"string"}],this.columnResizable=!1,this.list=new m.by([...j,...j,...j])}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:7,consts:[[3,"ngModel","ngModelChange"],[3,"dataSource","columns","columnResizable","scrollbarH","pageSizeOptions"]],template:function(n,p){1&n&&(s.TgZ(0,"mat-checkbox",0),s.NdJ("ngModelChange",function(i){return p.columnResizable=i}),s._uU(1,"Column Resizable"),s.qZA(),s._UZ(2,"mat-table-ext",1)),2&n&&(s.Q6J("ngModel",p.columnResizable),s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns)("columnResizable",p.columnResizable)("scrollbarH",!0)("pageSizeOptions",s.DdM(6,N)))},dependencies:[d.JJ,d.On,f.oG,g.UE],styles:["[_nghost-%COMP%]     .mat-table-ext{height:280px}"]}),t})(),files:[{file:"app.component.html",content:a(5467),filecontent:a(9821)},{file:"app.component.ts",content:a(9626),filecontent:a(3120)},{file:"app.component.scss",content:a(9402),filecontent:a(7678)}]},Z={title:"Loading status",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["Male","Female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"}],this.list=new m.by(j),this.isLoading=!0}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:4,consts:[[3,"ngModel","ngModelChange"],[3,"dataSource","columns","loadingIndicator"]],template:function(n,p){1&n&&(s.TgZ(0,"mat-checkbox",0),s.NdJ("ngModelChange",function(i){return p.isLoading=i}),s._uU(1,"Loading"),s.qZA(),s._UZ(2,"mat-table-ext",1)),2&n&&(s.Q6J("ngModel",p.isLoading),s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns)("loadingIndicator",p.isLoading))},dependencies:[d.JJ,d.On,f.oG,g.UE],styles:[".mat-checkbox[_ngcontent-%COMP%]{display:inline-block;margin-bottom:1rem}"]}),t})(),files:[{file:"app.component.html",content:a(4816),filecontent:a(3899)},{file:"app.component.ts",content:a(3083),filecontent:a(8121)},{file:"app.component.scss",content:a(9092),filecontent:a(7097)}]},H={title:"Hide pagination",description:"",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:1,vars:3,consts:[[3,"dataSource","columns","showPaginator"]],template:function(n,p){1&n&&s._UZ(0,"mat-table-ext",0),2&n&&s.Q6J("dataSource",p.list)("columns",p.columns)("showPaginator",!1)},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(9566),filecontent:a(7231)},{file:"app.component.ts",content:a(8744),filecontent:a(4043)},{file:"app.component.scss",content:a(5184),filecontent:a(629)}]},J={title:"Sortable",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",sortable:!0,type:"string"},{header:"Weight",field:"weight",sortable:!0,type:"string"},{header:"Gender",field:"gender",sortable:!0,type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",sortable:!1,type:"string"},{header:"City",field:"city",sortable:!0,type:"string"}],this.list=new m.by(j)}log(n){console.log(n)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:1,vars:3,consts:[[3,"dataSource","columns","sorting"]],template:function(n,p){1&n&&s._UZ(0,"mat-table-ext",0),2&n&&s.Q6J("dataSource",p.list)("columns",p.columns)("sorting",!0)},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(5508),filecontent:a(5705)},{file:"app.component.ts",content:a(1265),filecontent:a(3350)},{file:"app.component.scss",content:a(749),filecontent:a(3960)}]},I={title:"Row selectable",description:"<p>Use <code>button controls</code> from toolbar to show or hide rows.</p>",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"}],this.list=new m.by(j),this.rowSelection=!0,this.multiple=!1,this.rowSelected=j.slice(2,3)}log(n){console.log(n)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:6,vars:7,consts:[[3,"ngModel","ngModelChange"],[3,"dataSource","columns","showToolbar","rowSelection","multiRowSelection","selectionChanged"]],template:function(n,p){1&n&&(s.TgZ(0,"div")(1,"mat-checkbox",0),s.NdJ("ngModelChange",function(i){return p.rowSelection=i}),s._uU(2,"Row selectable"),s.qZA(),s.TgZ(3,"mat-checkbox",0),s.NdJ("ngModelChange",function(i){return p.multiple=i}),s._uU(4,"Multiple"),s.qZA()(),s.TgZ(5,"mat-table-ext",1),s.NdJ("selectionChanged",function(i){return p.log(i)}),s.qZA()),2&n&&(s.xp6(1),s.Q6J("ngModel",p.rowSelection),s.xp6(2),s.Q6J("ngModel",p.multiple),s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns)("showToolbar",!0)("rowSelection",p.rowSelection)("multiRowSelection",p.multiple))},dependencies:[d.JJ,d.On,f.oG,g.UE],styles:[".mat-checkbox[_ngcontent-%COMP%], .mat-radio-button[_ngcontent-%COMP%]{display:inline-block;margin-right:1rem;margin-bottom:1rem}"]}),t})(),files:[{file:"app.component.html",content:a(2123),filecontent:a(162)},{file:"app.component.ts",content:a(9368),filecontent:a(5761)},{file:"app.component.scss",content:a(9157),filecontent:a(7026)}]};function G(t,r){if(1&t&&(s.TgZ(0,"div",2),s._uU(1),s.TgZ(2,"p"),s._uU(3,"Lorem ipsum dolor, sit amet consectetur adipisicing elit. Doloremque libero animi accusantium totam mollitia corrupti, illum qui cumque sequi, culpa sunt deleniti, officia quaerat distinctio ipsam velit corporis amet aliquid?\n"),s.qZA()()),2&t){const n=r.row;s.xp6(1),s.hij(" ",n.name,"\n")}}const B={title:"Expandable row",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",showExpand:!0,type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"}],this.list=new m.by(j)}log(n){console.log(n)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:4,consts:[[3,"dataSource","columns","expandRows","expansionTemplateRef","expansionChange"],["expansionTpl",""],[2,"height","70px"]],template:function(n,p){if(1&n&&(s.TgZ(0,"mat-table-ext",0),s.NdJ("expansionChange",function(i){return p.log(i)}),s.qZA(),s.YNc(1,G,4,1,"ng-template",null,1,s.W1O)),2&n){const c=s.MAs(2);s.Q6J("dataSource",p.list)("columns",p.columns)("expandRows",!0)("expansionTemplateRef",c)}},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(9973),filecontent:a(8644)},{file:"app.component.ts",content:a(8070),filecontent:a(5865)},{file:"app.component.scss",content:a(7789),filecontent:a(6982)}]},Q=["grid"],K={title:"Column hiding & pinning",description:"<p>The <code>name</code> and <code>weight</code> column pinned left, the <code>email</code> column\n  pinned right. Scroll the columns to test.</p>",component:(()=>{class t{constructor(){this.columns=[{header:"Position",field:"position",width:"200px",type:"string"},{header:"Name",field:"name",width:"200px",pinned:"left",type:"string"},{header:"Weight",field:"weight",width:"200px",pinned:"left",type:"string"},{header:"Symbol",field:"symbol",width:"200px",type:"string"},{header:"Gender",field:"gender",width:"200px",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",width:"200px",type:"string"},{header:"Tele",field:"tele",width:"200px",type:"string"},{header:"City",field:"city",width:"200px",type:"string"},{header:"Address",field:"address",width:"200px",type:"string"},{header:"Date",field:"date",width:"200px",type:"string"},{header:"Website",field:"website",width:"200px",type:"string"},{header:"Company",field:"company",width:"200px",type:"string"},{header:"Email",field:"email",width:"200px",pinned:"right",type:"string"},{header:"Status",field:"status",type:"boolean",width:"200px"}],this.list=new m.by(j),this.columnPinnable=!0,this.columnHidable=!0}closeMenu(){this.grid.columnMenu.menuTrigger.closeMenu()}log(n){console.log(n)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],viewQuery:function(n,p){if(1&n&&s.Gf(Q,5),2&n){let c;s.iGM(c=s.CRH())&&(p.grid=c.first)}},decls:6,vars:8,consts:[[1,"ctrls"],[3,"ngModel","ngModelChange"],["toolbarTitle","Mat Table Ext",3,"dataSource","columns","showToolbar","scrollbarH","columnHidable","columnPinnable"]],template:function(n,p){1&n&&(s.TgZ(0,"div",0)(1,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return p.columnHidable=i}),s._uU(2,"Column Hiding"),s.qZA(),s.TgZ(3,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return p.columnPinnable=i}),s._uU(4,"Column Pinning"),s.qZA()(),s._UZ(5,"mat-table-ext",2)),2&n&&(s.xp6(1),s.Q6J("ngModel",p.columnHidable),s.xp6(2),s.Q6J("ngModel",p.columnPinnable),s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns)("showToolbar",!0)("scrollbarH",!0)("columnHidable",p.columnHidable)("columnPinnable",p.columnPinnable))},dependencies:[d.JJ,d.On,f.oG,g.UE],styles:["label[_ngcontent-%COMP%]{padding:0 8px}.ctrls[_ngcontent-%COMP%]{display:flex;gap:10px}"]}),t})(),files:[{file:"app.component.html",content:a(8339),filecontent:a(8076)},{file:"app.component.ts",content:a(3276),filecontent:a(1741)},{file:"app.component.scss",content:a(5092),filecontent:a(9337)}]},z={title:"Hover & striped",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"}],this.list=new m.by(j),this.rowHover=!0,this.rowStriped=!1}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:6,vars:6,consts:[[3,"ngModel","ngModelChange"],[3,"dataSource","columns","rowHover","stripedRows"]],template:function(n,p){1&n&&(s.TgZ(0,"div")(1,"mat-checkbox",0),s.NdJ("ngModelChange",function(i){return p.rowHover=i}),s._uU(2,"Hover"),s.qZA(),s.TgZ(3,"mat-checkbox",0),s.NdJ("ngModelChange",function(i){return p.rowStriped=i}),s._uU(4,"Striped"),s.qZA()(),s._UZ(5,"mat-table-ext",1)),2&n&&(s.xp6(1),s.Q6J("ngModel",p.rowHover),s.xp6(2),s.Q6J("ngModel",p.rowStriped),s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns)("rowHover",p.rowHover)("stripedRows",p.rowStriped))},dependencies:[d.JJ,d.On,f.oG,g.UE],styles:[".mat-checkbox[_ngcontent-%COMP%]{display:inline-block;margin-right:1rem;margin-bottom:1rem}"]}),t})(),files:[{file:"app.component.html",content:a(221),filecontent:a(1244)},{file:"app.component.ts",content:a(2657),filecontent:a(6639)},{file:"app.component.scss",content:a(2609),filecontent:a(4047)}]},Y={title:"Table export",description:" Expanded rows can also be exported when enabled",component:(()=>{class t{constructor(){this.columns=[{header:"Position",field:"position",width:"200px",type:"string"},{header:"Name",field:"name",width:"200px",type:"string"},{header:"Weight",field:"weight",width:"200px",type:"string"},{header:"Symbol",field:"symbol",width:"200px",type:"string"},{header:"Gender",field:"gender",width:"200px",type:"selection",options:["male","female"]}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:2,vars:5,consts:[["toolbarTitle","Mat Table Ext",3,"dataSource","columns","showToolbar","scrollbarH","exportButtonEnable"],["grid",""]],template:function(n,p){1&n&&s._UZ(0,"mat-table-ext",0,1),2&n&&s.Q6J("dataSource",p.list)("columns",p.columns)("showToolbar",!0)("scrollbarH",!0)("exportButtonEnable",!0)},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(3771),filecontent:a(2124)},{file:"app.component.ts",content:a(614),filecontent:a(5373)},{file:"app.component.scss",content:a(7760),filecontent:a(7104)}]},V={title:"Row with Operations",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"}],this.inlineEdit=!0,this.cellEdit=!0,this.popupEdit=!0,this.rowDelete=!0,this.list=new m.by([...M])}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:10,vars:10,consts:[[1,"ctrls"],[3,"ngModel","ngModelChange"],[3,"dataSource","columns","enableDelete","inCellEditing","inlineRowEditing","popupRowEditing"]],template:function(n,p){1&n&&(s.TgZ(0,"div",0)(1,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return p.inlineEdit=i}),s._uU(2,"Inline Edit"),s.qZA(),s.TgZ(3,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return p.cellEdit=i}),s._uU(4,"Cell Edit"),s.qZA(),s.TgZ(5,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return p.popupEdit=i}),s._uU(6,"Popup Edit"),s.qZA(),s.TgZ(7,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return p.rowDelete=i}),s._uU(8,"Delete Row"),s.qZA()(),s._UZ(9,"mat-table-ext",2)),2&n&&(s.xp6(1),s.Q6J("ngModel",p.inlineEdit),s.xp6(2),s.Q6J("ngModel",p.cellEdit),s.xp6(2),s.Q6J("ngModel",p.popupEdit),s.xp6(2),s.Q6J("ngModel",p.rowDelete),s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns)("enableDelete",p.rowDelete)("inCellEditing",p.cellEdit)("inlineRowEditing",p.inlineEdit)("popupRowEditing",p.popupEdit))},dependencies:[d.JJ,d.On,f.oG,g.UE],styles:[".ctrls[_ngcontent-%COMP%]{display:flex;gap:10px}"]}),t})(),files:[{file:"app.component.html",content:a(2565),filecontent:a(9099)},{file:"app.component.ts",content:a(1018),filecontent:a(8357)},{file:"app.component.scss",content:a(2929),filecontent:a(3390)}]},$={title:"Column Reorder",description:"<p>Pick the column from header and drop where you want to place the column.<p>",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"}],this.dragCtrl=!1,this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:4,consts:[[3,"ngModel","ngModelChange"],[3,"dataSource","columns","dndColumns"]],template:function(n,p){1&n&&(s.TgZ(0,"mat-checkbox",0),s.NdJ("ngModelChange",function(i){return p.dragCtrl=i}),s._uU(1,"Column Reorder"),s.qZA(),s._UZ(2,"mat-table-ext",1)),2&n&&(s.Q6J("ngModel",p.dragCtrl),s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns)("dndColumns",p.dragCtrl))},dependencies:[d.JJ,d.On,f.oG,g.UE]}),t})(),files:[{file:"app.component.html",content:a(3210),filecontent:a(7581)},{file:"app.component.ts",content:a(3340),filecontent:a(9189)},{file:"app.component.scss",content:a(8314),filecontent:a(8332)}]};var ss=a(455);const as=["statusTpl"];function ns(t,r){1&t&&(s.TgZ(0,"mat-slide-toggle",2),s._uU(1,"Slide me!"),s.qZA()),2&t&&s.Q6J("checked",r.row.status)}const ts={title:"Custom cell template",description:"\n  <p>The status column are custom cells.</p>\n  ",component:(()=>{class t{constructor(){this.columns=[],this.list=new m.by(j)}ngOnInit(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"},{header:"Status",field:"status",type:"string",cellTemplate:this.statusTpl}]}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],viewQuery:function(n,p){if(1&n&&s.Gf(as,7),2&n){let c;s.iGM(c=s.CRH())&&(p.statusTpl=c.first)}},decls:3,vars:2,consts:[[3,"dataSource","columns"],["statusTpl",""],[3,"checked"]],template:function(n,p){1&n&&(s._UZ(0,"mat-table-ext",0),s.YNc(1,ns,2,1,"ng-template",null,1,s.W1O)),2&n&&s.Q6J("dataSource",p.list)("columns",p.columns)},dependencies:[ss.Rr,g.UE]}),t})(),files:[{file:"app.component.html",content:a(1927),filecontent:a(635)},{file:"app.component.ts",content:a(8145),filecontent:a(2472)},{file:"app.component.scss",content:a(7929),filecontent:a(1607)}]};var w=a(4859);function ls(t,r){if(1&t&&(s.TgZ(0,"button",3),s._uU(1),s.qZA()),2&t){const n=r.row;s.xp6(1),s.Oqu(n.mobile)}}function es(t,r){if(1&t&&(s.TgZ(0,"button",4),s._uU(1),s.qZA()),2&t){const n=r.row;s.xp6(1),s.Oqu(n.city)}}const ps=function(t,r){return{mobile:t,city:r}},rs={title:"Custom cell template 2",description:'\n  <p>There has another easiest way to custom cells. You can use property\n  <code>[cellTemplateRefMap]="{ mobile: mobileTpl, city: cityTpl }"</code>,\n  the key of cellTemplate is the column field.</p>\n  ',component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:5,vars:6,consts:[[3,"dataSource","columns","cellTemplateRefMap"],["mobileTpl",""],["cityTpl",""],["mat-raised-button","","color","accent"],["mat-raised-button","","color","primary"]],template:function(n,p){if(1&n&&(s._UZ(0,"mat-table-ext",0),s.YNc(1,ls,2,1,"ng-template",null,1,s.W1O),s.YNc(3,es,2,1,"ng-template",null,2,s.W1O)),2&n){const c=s.MAs(2),i=s.MAs(4);s.Q6J("dataSource",p.list)("columns",p.columns)("cellTemplateRefMap",s.WLB(3,ps,c,i))}},dependencies:[w.lW,g.UE]}),t})(),files:[{file:"app.component.html",content:a(6809),filecontent:a(2585)},{file:"app.component.ts",content:a(6056),filecontent:a(295)},{file:"app.component.scss",content:a(8759),filecontent:a(9743)}]};var y=a(7392),_=a(266);function os(t,r){if(1&t&&(s._uU(0),s.TgZ(1,"mat-icon",2),s._uU(2,"info"),s.qZA()),2&t){const n=r.data;s.hij(" ",n.header," "),s.xp6(1),s.Q6J("matTooltip",n.description)}}const cs={title:"Custom header template",description:"\n  <p>If you just want to append something to header, you can try\n  <code>[headerTemplateRef]</code> instead.</p>\n  ",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",description:"Info about the name",type:"string"},{header:"Weight",field:"weight",description:"Info about the weight",type:"string"},{header:"Gender",field:"gender",description:"Info about the gender",type:"string"},{header:"Mobile",field:"mobile",description:"Info about the mobile",type:"string"},{header:"City",field:"city",description:"Info about the city",type:"string"}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:3,consts:[[3,"dataSource","columns","headerTemplateRef"],["headerTpl",""],[3,"matTooltip"]],template:function(n,p){if(1&n&&(s._UZ(0,"mat-table-ext",0),s.YNc(1,os,3,2,"ng-template",null,1,s.W1O)),2&n){const c=s.MAs(2);s.Q6J("dataSource",p.list)("columns",p.columns)("headerTemplateRef",c)}},dependencies:[y.Hw,_.gM,g.UE]}),t})(),files:[{file:"app.component.html",content:a(1366),filecontent:a(6944)},{file:"app.component.ts",content:a(3337),filecontent:a(2346)},{file:"app.component.scss",content:a(2980),filecontent:a(8484)}]};var is=a(9968);const hs={title:"Virtual Scrolling",component:(()=>{class t{constructor(n){this.service=n,this.columns=[{header:"ID",field:"id",type:"number"},{header:"Name",field:"name",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Age",field:"age",type:"string"}],this.list=new m.by,this.isLoading=!1,this.loadPage(10)}onScroll(n){let x=n.target.scrollHeight-(n.target.scrollTop+n.target.clientHeight);console.log("scrollPosition",x),x<=5&&this.loadPage(10)}loadPage(n){this.isLoading=!0,this.service.getResults(this.list?this.list.data.length:0,n).subscribe(c=>{if(this.list){const i=[...this.list.data,...c.data];this.list=new m.by(i)}else{const i=[...c.data];this.list=new m.by(i)}this.isLoading=!1})}}return t.\u0275fac=function(n){return new(n||t)(s.Y36(is.u))},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:1,vars:4,consts:[["tableHeight","500px",3,"dataSource","columns","showPaginator","loadingIndicator","scroll"]],template:function(n,p){1&n&&(s.TgZ(0,"mat-table-ext",0),s.NdJ("scroll",function(i){return p.onScroll(i)}),s.qZA()),2&n&&s.Q6J("dataSource",p.list)("columns",p.columns)("showPaginator",!1)("loadingIndicator",p.isLoading)},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(2093),filecontent:a(5582)},{file:"app.component.ts",content:a(3842),filecontent:a(8701)},{file:"app.component.scss",content:a(2942),filecontent:a(8160)}]};function ms(t,r){1&t&&s._UZ(0,"input",2)}const ds={title:"Custom toolbar template",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"},{header:"Cost",field:"cost",type:"string"}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:4,consts:[[3,"dataSource","columns","showToolbar","toolbarTemplateRef"],["toolbarTpl",""],["placeholder","Search"]],template:function(n,p){if(1&n&&(s._UZ(0,"mat-table-ext",0),s.YNc(1,ms,1,0,"ng-template",null,1,s.W1O)),2&n){const c=s.MAs(2);s.Q6J("dataSource",p.list)("columns",p.columns)("showToolbar",!0)("toolbarTemplateRef",c)}},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(9581),filecontent:a(486)},{file:"app.component.ts",content:a(687),filecontent:a(7861)},{file:"app.component.scss",content:a(9662),filecontent:a(4e3)}]};var u=a(6895),S=a(3238),b=a(5938),A=a(9549),D=a(4144),v=a(4385);const E=function(){return{standalone:!0}};function gs(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-form-field",17)(1,"mat-label"),s._uU(2),s.ALo(3,"titlecase"),s.qZA(),s.TgZ(4,"input",18),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw().$implicit,h=s.oxw().data?.row;return s.KtG(h[i]=c)}),s.qZA()()}if(2&t){const n=s.oxw().$implicit,p=s.oxw().data?.row;s.xp6(2),s.Oqu(s.lcZ(3,3,n)),s.xp6(2),s.Q6J("ngModel",p[n])("ngModelOptions",s.DdM(5,E))}}function js(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-form-field",19)(1,"mat-label"),s._uU(2),s.ALo(3,"titlecase"),s.qZA(),s.TgZ(4,"input",20),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw().$implicit,h=s.oxw().data?.row;return s.KtG(h[i]=c)}),s.qZA()()}if(2&t){const n=s.oxw().$implicit,p=s.oxw().data?.row;s.xp6(2),s.Oqu(s.lcZ(3,3,n)),s.xp6(2),s.Q6J("ngModel",p[n])("ngModelOptions",s.DdM(5,E))}}function us(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-form-field",19)(1,"mat-label"),s._uU(2),s.ALo(3,"titlecase"),s.qZA(),s.TgZ(4,"input",21),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw().$implicit,h=s.oxw().data?.row;return s.KtG(h[i]=c)}),s.qZA()()}if(2&t){const n=s.oxw().$implicit,p=s.oxw().data?.row;s.xp6(2),s.Oqu(s.lcZ(3,3,n)),s.xp6(2),s.Q6J("ngModel",p[n])("ngModelOptions",s.DdM(5,E))}}function xs(t,r){if(1&t&&(s.TgZ(0,"mat-option",24),s._uU(1),s.qZA()),2&t){const n=r.$implicit;s.Q6J("value",n),s.xp6(1),s.hij(" ",n," ")}}function fs(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-form-field",19)(1,"mat-label"),s._uU(2),s.ALo(3,"titlecase"),s.qZA(),s.TgZ(4,"mat-select",22),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw().$implicit,h=s.oxw().data?.row;return s.KtG(h[i].value=c)}),s.YNc(5,xs,2,2,"mat-option",23),s.qZA()()}if(2&t){const n=s.oxw().$implicit,p=s.oxw().data?.row;s.xp6(2),s.Oqu(s.lcZ(3,3,n)),s.xp6(2),s.Q6J("ngModel",p[n].value),s.xp6(1),s.Q6J("ngForOf",p[n].options)}}function ys(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-checkbox",25),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw().$implicit,h=s.oxw().data?.row;return s.KtG(h[i]=c)}),s.TgZ(1,"mat-label"),s._uU(2),s.ALo(3,"titlecase"),s.qZA()()}if(2&t){const n=s.oxw().$implicit,p=s.oxw().data?.row;s.Q6J("ngModel",p[n]),s.xp6(2),s.Oqu(s.lcZ(3,2,n))}}function bs(t,r){if(1&t&&(s.ynx(0),s.YNc(1,gs,5,6,"mat-form-field",14),s.YNc(2,js,5,6,"mat-form-field",15),s.YNc(3,us,5,6,"mat-form-field",15),s.YNc(4,fs,6,5,"mat-form-field",15),s.TgZ(5,"p"),s.YNc(6,ys,4,4,"mat-checkbox",16),s.qZA(),s.BQk()),2&t){const n=r.$implicit,p=s.oxw().data.columnTypes;s.xp6(1),s.Q6J("ngIf","number"==p[n]),s.xp6(1),s.Q6J("ngIf","string"==p[n]),s.xp6(1),s.Q6J("ngIf","date"==p[n]),s.xp6(1),s.Q6J("ngIf","selection"==p[n]),s.xp6(2),s.Q6J("ngIf","boolean"==p[n])}}function Cs(t,r){if(1&t&&(s.TgZ(0,"div",2)(1,"div",3)(2,"h2",4),s._uU(3,"Custom Template"),s.qZA(),s._UZ(4,"span",5),s.TgZ(5,"button",6)(6,"mat-icon",7),s._uU(7,"close"),s.qZA()()(),s.TgZ(8,"mat-dialog-content",8)(9,"div",9),s.YNc(10,bs,7,5,"ng-container",10),s.qZA()(),s.TgZ(11,"mat-dialog-actions",11)(12,"button",12),s._uU(13," Cancel "),s.qZA(),s.TgZ(14,"button",13),s._uU(15,"Save"),s.qZA()()()),2&t){const n=r.data?.row,p=r.data.columnKeys;s.xp6(10),s.Q6J("ngForOf",p),s.xp6(4),s.Q6J("mat-dialog-close",n)}}const Ts={title:"Custom Popup Editing template",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"},{header:"Cost",field:"cost",type:"string"}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:4,consts:[[3,"dataSource","columns","popupRowEditing","popupEditingTemplateRef"],["popupEditing",""],[1,"main-dialog-container",2,"height","100%"],["mat-dialog-title","",1,"dialog-title-container",2,"display","flex"],[2,"margin","0"],[1,"example-spacer"],["mat-icon-button","","aria-label","Example icon button with a vertical three dot icon"],["mat-dialog-close","","fxFlex","5",2,"cursor","pointer"],[2,"margin-right","20px"],[2,"display","flex","flex-direction","column"],[4,"ngFor","ngForOf"],["align","end",2,"margin-top","20px"],["mat-raised-button","","color","accent","mat-dialog-close",""],["mat-raised-button","","color","primary",3,"mat-dialog-close"],["color","accent","appearance","standard","class","inline-editing-field",4,"ngIf"],["appearance","standard","color","accent","class","inline-editing-field",4,"ngIf"],["color","accent",3,"ngModel","ngModelChange",4,"ngIf"],["color","accent","appearance","standard",1,"inline-editing-field"],["matInput","","type","number","color","accent",3,"ngModel","ngModelOptions","ngModelChange"],["appearance","standard","color","accent",1,"inline-editing-field"],["matInput","","type","text","color","accent",3,"ngModel","ngModelOptions","ngModelChange"],["matInput","","type","text",3,"ngModel","ngModelOptions","ngModelChange"],[3,"ngModel","ngModelChange"],[3,"value",4,"ngFor","ngForOf"],[3,"value"],["color","accent",3,"ngModel","ngModelChange"]],template:function(n,p){if(1&n&&(s._UZ(0,"mat-table-ext",0),s.YNc(1,Cs,16,2,"ng-template",null,1,s.W1O)),2&n){const c=s.MAs(2);s.Q6J("dataSource",p.list)("columns",p.columns)("popupRowEditing",!0)("popupEditingTemplateRef",c)}},dependencies:[u.sg,u.O5,d.Fj,d.wV,d.JJ,d.On,S.ey,w.lW,f.oG,b.ZT,b.uh,b.xY,b.H8,y.Hw,A.KE,A.hX,D.Nt,v.gD,g.UE,u.rS]}),t})(),files:[{file:"app.component.html",content:a(1693),filecontent:a(6074)},{file:"app.component.ts",content:a(9617),filecontent:a(4092)},{file:"app.component.scss",content:a(2261),filecontent:a(2132)}]},C=function(){return{standalone:!0}};function ws(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-form-field",4)(1,"input",5),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw();return s.KtG(i.data.row[i.data.column.field]=c)})("ngModelChange",function(){s.CHM(n);const c=s.oxw();return s.KtG((0,c.data.updateFunc)(c.data.row))}),s.qZA()()}if(2&t){const n=s.oxw(),p=n.data.row,c=n.data.column;s.xp6(1),s.Q6J("ngModel",p[c.field])("ngModelOptions",s.DdM(2,C))}}function As(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-form-field",4)(1,"input",6),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw();return s.KtG(i.data.row[i.data.column.field]=c)})("ngModelChange",function(){s.CHM(n);const c=s.oxw();return s.KtG((0,c.data.updateFunc)(c.data.row))}),s.qZA()()}if(2&t){const n=s.oxw(),p=n.data.row,c=n.data.column;s.xp6(1),s.Q6J("ngModel",p[c.field])("ngModelOptions",s.DdM(2,C))}}function Es(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-form-field",4)(1,"input",7),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw();return s.KtG(i.data.row[i.data.column.field]=c)})("ngModelChange",function(){s.CHM(n);const c=s.oxw();return s.KtG((0,c.data.updateFunc)(c.data.row))}),s.qZA()()}if(2&t){const n=s.oxw(),p=n.data.row,c=n.data.column;s.xp6(1),s.Q6J("ngModel",p[c.field])("ngModelOptions",s.DdM(2,C))}}function Ms(t,r){if(1&t&&(s.TgZ(0,"mat-option",10),s._uU(1),s.qZA()),2&t){const n=r.$implicit;s.Q6J("value",n),s.xp6(1),s.hij(" ",n," ")}}function _s(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-form-field",4)(1,"mat-select",8),s.NdJ("ngModelChange",function(c){s.CHM(n);const i=s.oxw();return s.KtG(i.data.row[i.data.column.field]=c)})("ngModelChange",function(){s.CHM(n);const c=s.oxw();return s.KtG((0,c.data.updateFunc)(c.data.row))}),s.YNc(2,Ms,2,2,"mat-option",9),s.qZA()()}if(2&t){const n=s.oxw(),p=n.data.row,c=n.data.column;s.xp6(1),s.Q6J("value",p[c.field])("ngModel",p[c.field])("ngModelOptions",s.DdM(4,C)),s.xp6(1),s.Q6J("ngForOf",c.options)}}function Ss(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-checkbox",11),s.NdJ("click",function(c){return c.stopPropagation()})("ngModelChange",function(){s.CHM(n);const c=s.oxw();return s.KtG((0,c.data.updateFunc)(c.data.row))})("ngModelChange",function(c){s.CHM(n);const i=s.oxw();return s.KtG(i.data.row[i.data.column.field]=c)}),s.qZA()}if(2&t){const n=s.oxw();s.Q6J("ngModel",n.data.row[n.data.column.field])}}function Ds(t,r){if(1&t&&(s.YNc(0,ws,2,3,"mat-form-field",2),s.YNc(1,As,2,3,"mat-form-field",2),s.YNc(2,Es,2,3,"mat-form-field",2),s.YNc(3,_s,3,5,"mat-form-field",2),s.YNc(4,Ss,1,1,"mat-checkbox",3)),2&t){const n=r.data.column;s.Q6J("ngIf","number"==n.type),s.xp6(1),s.Q6J("ngIf","string"==n.type),s.xp6(1),s.Q6J("ngIf","date"==n.type),s.xp6(1),s.Q6J("ngIf","selection"==n.type),s.xp6(1),s.Q6J("ngIf","boolean"==n.type)}}const vs={title:"Custom Inline Editing template",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"string"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"},{header:"Cost",field:"cost",type:"string"}],this.list=new m.by(M)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:3,vars:4,consts:[[3,"dataSource","columns","inlineRowEditing","inlineEditingTemplateRef"],["inlineEditing",""],["appearance","outline","class","inline-editing-field",4,"ngIf"],["color","primary",3,"ngModel","click","ngModelChange",4,"ngIf"],["appearance","outline",1,"inline-editing-field"],["matInput","","type","number",3,"ngModel","ngModelOptions","ngModelChange"],["matInput","","type","text",3,"ngModel","ngModelOptions","ngModelChange"],["matInput","","type","date",3,"ngModel","ngModelOptions","ngModelChange"],[3,"value","ngModel","ngModelOptions","ngModelChange"],[3,"value",4,"ngFor","ngForOf"],[3,"value"],["color","primary",3,"ngModel","click","ngModelChange"]],template:function(n,p){if(1&n&&(s._UZ(0,"mat-table-ext",0),s.YNc(1,Ds,5,5,"ng-template",null,1,s.W1O)),2&n){const c=s.MAs(2);s.Q6J("dataSource",p.list)("columns",p.columns)("inlineRowEditing",!0)("inlineEditingTemplateRef",c)}},dependencies:[u.sg,u.O5,d.Fj,d.wV,d.JJ,d.On,S.ey,f.oG,A.KE,D.Nt,v.gD,g.UE]}),t})(),files:[{file:"app.component.html",content:a(996),filecontent:a(7295)},{file:"app.component.ts",content:a(1687),filecontent:a(7641)},{file:"app.component.scss",content:a(6768),filecontent:a(1761)}]},ks={title:"Global Search Filter",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"number"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Mobile",field:"mobile",type:"string"},{header:"City",field:"city",type:"string"},{header:"Date",field:"date",type:"date"}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:1,vars:3,consts:[[3,"dataSource","columns","globalSearch"]],template:function(n,p){1&n&&s._UZ(0,"mat-table-ext",0),2&n&&s.Q6J("dataSource",p.list)("columns",p.columns)("globalSearch",!0)},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(9679),filecontent:a(7809)},{file:"app.component.ts",content:a(7715),filecontent:a(249)},{file:"app.component.scss",content:a(1228),filecontent:a(4148)}]},Ps={title:"Column Search Filter",component:(()=>{class t{constructor(){this.columns=[{header:"Name",field:"name",type:"string"},{header:"Weight",field:"weight",type:"number"},{header:"Gender",field:"gender",type:"selection",options:["male","female"]},{header:"Date",field:"date",type:"date"},{header:"Status",field:"status",type:"boolean"}],this.list=new m.by(j)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:1,vars:3,consts:[[3,"dataSource","columns","columnFilter"]],template:function(n,p){1&n&&s._UZ(0,"mat-table-ext",0),2&n&&s.Q6J("dataSource",p.list)("columns",p.columns)("columnFilter",!0)},dependencies:[g.UE]}),t})(),files:[{file:"app.component.html",content:a(5877),filecontent:a(3361)},{file:"app.component.ts",content:a(570),filecontent:a(9472)},{file:"app.component.scss",content:a(3556),filecontent:a(3109)}]},qs={title:"Sticky Header & Footer",component:(()=>{class t{constructor(){this.columns=[{header:"Position",footerText:"Position",field:"position",type:"string"},{header:"Name",footerText:"Name",field:"name",type:"string"},{header:"Symbol",footerText:"Symbol",field:"symbol",type:"string"},{header:"Weight",footerText:"Weight",field:"weight",type:"number"}],this.stickyHeader=!0,this.stickyFooter=!0,this.list=new m.by(X)}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["data-grid-example"]],decls:6,vars:8,consts:[[1,"ctrls"],[3,"ngModel","ngModelChange"],["tableHeight","400px",3,"dataSource","columns","showPaginator","showFooterRow","stickyHeader","stickyFooter"]],template:function(n,p){1&n&&(s.TgZ(0,"div",0)(1,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return p.stickyHeader=i}),s._uU(2,"Sticky Header"),s.qZA(),s.TgZ(3,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return p.stickyFooter=i}),s._uU(4,"Sticky Footer"),s.qZA()(),s._UZ(5,"mat-table-ext",2)),2&n&&(s.xp6(1),s.Q6J("ngModel",p.stickyHeader),s.xp6(2),s.Q6J("ngModel",p.stickyFooter),s.xp6(2),s.Q6J("dataSource",p.list)("columns",p.columns)("showPaginator",!1)("showFooterRow",!0)("stickyHeader",p.stickyHeader)("stickyFooter",p.stickyFooter))},dependencies:[d.JJ,d.On,f.oG,g.UE],styles:[".ctrls[_ngcontent-%COMP%]{display:flex;gap:10px}"]}),t})(),files:[{file:"app.component.html",content:a(3640),filecontent:a(9735)},{file:"app.component.ts",content:a(5037),filecontent:a(2893)},{file:"app.component.scss",content:a(5406),filecontent:a(7339)}]};let Us=(()=>{class t{constructor(n){this.platformLocation=n,this._text=""}ngOnInit(){this._text=this.example.toLowerCase().split(" ").filter(n=>"&"!==n).join("-")}getFragmentUrl(){return`${this.platformLocation.pathname}#${this._text}`}}return t.\u0275fac=function(n){return new(n||t)(s.Y36(u.lw))},t.\u0275cmp=s.Xpm({type:t,selectors:[["header-link"]],inputs:{example:"example"},decls:3,vars:2,consts:[["aria-label","Link to this heading",1,"docs-markdown-a","header-link",3,"href"]],template:function(n,p){1&n&&(s.TgZ(0,"a",0)(1,"mat-icon"),s._uU(2,"link"),s.qZA()()),2&n&&(s.Q6J("href",p.getFragmentUrl(),s.LSH),s.uIk("aria-describedby",p.example))},dependencies:[y.Hw],styles:["h1 .header-link,h2 .header-link,h3 .header-link,h4 .header-link,h5 .header-link,h6 .header-link{display:inline-flex;padding:2px 0;margin-left:-30px;color:#6e6e6e;text-decoration:none;-webkit-user-select:none;user-select:none;visibility:hidden;vertical-align:middle}h1:hover .header-link,h2:hover .header-link,h3:hover .header-link,h4:hover .header-link,h5:hover .header-link,h6:hover .header-link{visibility:visible}h1 span,h2 span,h3 span,h4 span,h5 span,h6 span{vertical-align:middle}\n"],encapsulation:2}),t})(),Ls=(()=>{class t{constructor(){this.text="",this.id=""}ngOnInit(){this.id=this.text.toLowerCase().split(" ").filter(n=>"&"!==n).join("-")}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["doc-heading"]],inputs:{text:"text"},decls:4,vars:3,consts:[[2,"font-size","1.5em","font-weight","bold",3,"id"],[3,"example"]],template:function(n,p){1&n&&(s.TgZ(0,"h3",0),s._UZ(1,"header-link",1),s.TgZ(2,"span"),s._uU(3),s.qZA()()),2&n&&(s.Q6J("id",p.id),s.xp6(1),s.Q6J("example",p.text),s.xp6(2),s.hij(" ",p.text,""))},dependencies:[Us],encapsulation:2}),t})();var Rs=a(7009),Os=a(4236),k=a(3848);const Xs=["demo"];function Fs(t,r){if(1&t){const n=s.EpF();s.TgZ(0,"mat-tab",11)(1,"div",12)(2,"div",13)(3,"button",14),s.NdJ("click",function(){s.CHM(n);const c=s.MAs(8),i=s.oxw(2);return s.KtG(i.copySource(c))}),s.TgZ(4,"mat-icon"),s._uU(5,"content_copy"),s.qZA()()(),s.TgZ(6,"div",15),s._UZ(7,"pre",16,17),s.qZA()()()}if(2&t){const n=r.$implicit;s.Q6J("label",n.file),s.xp6(3),s.Q6J("matTooltip","Copy example source"),s.xp6(4),s.Q6J("innerHtml",n.content,s.oJD)}}function Ns(t,r){if(1&t&&(s.TgZ(0,"div",8)(1,"mat-tab-group",9),s.YNc(2,Fs,9,3,"mat-tab",10),s.qZA()()),2&t){const n=s.oxw();s.xp6(2),s.Q6J("ngForOf",n.exampleData.files)}}function Ws(t,r){if(1&t&&s._UZ(0,"div",18),2&t){const n=s.oxw();s.Q6J("innerHtml",n.exampleData.description,s.oJD)}}function Zs(t,r){}let Hs=(()=>{class t{constructor(n,p,c){this.snackbar=n,this.copier=p,this.componentFactoryResolver=c,this.showSource=!1}ngOnInit(){const n=this.componentFactoryResolver.resolveComponentFactory(this.exampleData.component);this.demoComponentRef=this.demoRef.createComponent(n)}ngOnDestroy(){this.demoComponentRef&&this.demoComponentRef.destroy()}toggleSourceView(){this.showSource=!this.showSource}copySource(n){this.copier.copyText(n.innerText)?this.snackbar.open("Code copied","",{duration:2500}):this.snackbar.open("Copy failed. Please try again!","",{duration:2500})}}return t.\u0275fac=function(n){return new(n||t)(s.Y36(Rs.ux),s.Y36(Os.u),s.Y36(s._Vd))},t.\u0275cmp=s.Xpm({type:t,selectors:[["example-viewer"]],viewQuery:function(n,p){if(1&n&&s.Gf(Xs,7,s.s_b),2&n){let c;s.iGM(c=s.CRH())&&(p.demoRef=c.first)}},inputs:{type:"type",exampleData:"exampleData"},decls:13,vars:4,consts:[[1,"docs-example-viewer-wrapper"],[1,"docs-example-viewer-title"],[1,"docs-example-viewer-title-spacer"],["mat-icon-button","","type","button","aria-label","View source",3,"matTooltip","click"],["class","docs-example-viewer-source",4,"ngIf"],[1,"docs-example-viewer-body"],[3,"innerHtml",4,"ngIf"],["demo",""],[1,"docs-example-viewer-source"],["animationDuration","0ms","mat-stretch-tabs","false"],[3,"label",4,"ngFor","ngForOf"],[3,"label"],[1,"docs-example-source-wrapper"],[1,"button-bar"],["mat-icon-button","","type","button","title","Copy example source","aria-label","Copy example source to clipboard",1,"docs-example-source-copy","docs-example-button",3,"matTooltip","click"],[1,"code-snippet"],[1,"docs-example-source",3,"innerHtml"],["textContent",""],[3,"innerHtml"]],template:function(n,p){1&n&&(s.TgZ(0,"div",0)(1,"div",1)(2,"span"),s._uU(3),s.qZA(),s._UZ(4,"div",2),s.TgZ(5,"button",3),s.NdJ("click",function(){return p.toggleSourceView()}),s.TgZ(6,"mat-icon"),s._uU(7,"code"),s.qZA()()(),s.YNc(8,Ns,3,1,"div",4),s.TgZ(9,"div",5),s.YNc(10,Ws,1,1,"div",6),s.YNc(11,Zs,0,0,"ng-template",null,7,s.W1O),s.qZA()()),2&n&&(s.xp6(3),s.Oqu(p.exampleData.title),s.xp6(2),s.Q6J("matTooltip","View source"),s.xp6(3),s.Q6J("ngIf",p.showSource),s.xp6(2),s.Q6J("ngIf",p.exampleData.description))},dependencies:[u.sg,u.O5,w.lW,y.Hw,k.SP,k.uX,_.gM],styles:["[_nghost-%COMP%]{display:block;padding:20px 0}.docs-example-viewer-wrapper[_ngcontent-%COMP%]{border-radius:4px}.docs-example-viewer-title[_ngcontent-%COMP%]{display:flex;align-content:center;align-items:center;justify-content:center;padding:8px 8px 8px 16px}.docs-example-viewer-title-spacer[_ngcontent-%COMP%]{flex:1 1 auto}.docs-example-viewer-body[_ngcontent-%COMP%]{padding:30px}.button-bar[_ngcontent-%COMP%]{float:right;padding:8px}.code-snippet[_ngcontent-%COMP%]{padding:20px}.docs-example-source[_ngcontent-%COMP%]{padding:0;margin:0;border:none;background:none;font-size:14px}"]}),t})(),Js=(()=>{class t{constructor(n){this._elementRef=n,this.contentRendered=new s.vpe}set textContent(n){void 0!==n&&(this.innerHtmlData=n,this.contentRendered.emit(this._elementRef.nativeElement))}ngOnDestroy(){}}return t.\u0275fac=function(n){return new(n||t)(s.Y36(s.SBq))},t.\u0275cmp=s.Xpm({type:t,selectors:[["doc-viewer"]],inputs:{textContent:"textContent"},outputs:{contentRendered:"contentRendered"},decls:1,vars:1,consts:[[1,"docs-markdown",3,"innerHTML"]],template:function(n,p){1&n&&s._UZ(0,"div",0),2&n&&s.Q6J("innerHTML",p.innerHtmlData,s.oJD)},styles:[".docs-markdown h1,.docs-markdown h2{font-weight:400}.docs-markdown h3{margin:40px 0 20px;padding-bottom:3px;font-weight:300;font-size:24px;line-height:32px}.docs-markdown h4{display:block;margin-top:28px;margin-bottom:16px;font-weight:700;font-size:20px;background:none}.docs-markdown h4 code{padding:0;background:none}.docs-markdown h5{font-size:15px}.docs-markdown h6{font-size:13px}.docs-markdown table{width:100%;margin:0 0 32px;border-collapse:collapse;border-radius:2px;border-spacing:0}.docs-markdown table code{padding:0;background-color:transparent}.docs-markdown th{max-width:100px;padding:13px 16px;font-weight:400;text-align:left}.docs-markdown td{padding:8px 16px;font-weight:400;font-size:14px}.docs-markdown pre{display:block;margin:16px auto;overflow-x:auto;border-radius:5px;white-space:pre-wrap;background:rgba(0,0,0,.01);border:.5px solid rgba(0,0,0,.2)}\n"],encapsulation:2}),t})();const Is=["toc"];function Gs(t,r){if(1&t&&(s.ynx(0),s._UZ(1,"doc-heading",2)(2,"example-viewer",3),s.BQk()),2&t){const n=r.$implicit;s.xp6(1),s.Q6J("text",n.title),s.xp6(1),s.Q6J("exampleData",n)}}function Bs(t,r){if(1&t&&(s.ynx(0),s.YNc(1,Gs,3,2,"ng-container",1),s.BQk()),2&t){const n=r.ngIf;s.xp6(1),s.Q6J("ngForOf",n.examples)}}function Qs(t,r){if(1&t&&(s.ynx(0),s._UZ(1,"doc-viewer",1),s.BQk()),2&t){const n=r.ngIf;s.xp6(1),s.Q6J("textContent",n.content.default)}}function P(t){return new O(t,"assets/i18n/data-grid/","_json")}let q=(()=>{class t{constructor(n,p){this.route=n,this.elRef=p}ngOnInit(){}ngAfterViewInit(){this.elRef&&setTimeout(()=>{this.updateTableOfContents("Overview",this.elRef.nativeElement)},0)}updateTableOfContents(n,p,c=0){this.tableOfContents&&(this.tableOfContents.addHeaders(n,p,c),this.tableOfContents.updateScrollPosition())}}return t.\u0275fac=function(n){return new(n||t)(s.Y36(T.gz),s.Y36(s.SBq))},t.\u0275cmp=s.Xpm({type:t,selectors:[["app-mat-table-ext-overview"]],viewQuery:function(n,p){if(1&n&&s.Gf(Is,5),2&n){let c;s.iGM(c=s.CRH())&&(p.tableOfContents=c.first)}},decls:7,vars:3,consts:[[4,"ngIf"],[4,"ngFor","ngForOf"],[3,"text"],[3,"exampleData"]],template:function(n,p){1&n&&(s.TgZ(0,"p"),s._uU(1," The "),s.TgZ(2,"code"),s._uU(3,"mat-table-ext"),s.qZA(),s._uU(4," is an powerful material table component. It supports row selectable, row expandable, column hiding, column moving, templates and so on.\n"),s.qZA(),s.YNc(5,Bs,2,1,"ng-container",0),s.ALo(6,"async")),2&n&&(s.xp6(5),s.Q6J("ngIf",s.lcZ(6,1,p.route.data)))},dependencies:[u.sg,u.O5,Ls,Hs,u.Ov]}),t})(),U=(()=>{class t{constructor(n){this.route=n}ngOnInit(){}}return t.\u0275fac=function(n){return new(n||t)(s.Y36(T.gz))},t.\u0275cmp=s.Xpm({type:t,selectors:[["app-mat-table-ext-api"]],decls:2,vars:3,consts:[[4,"ngIf"],[3,"textContent"]],template:function(n,p){1&n&&(s.YNc(0,Qs,2,1,"ng-container",0),s.ALo(1,"async")),2&n&&s.Q6J("ngIf",s.lcZ(1,1,p.route.data))},dependencies:[u.O5,Js,u.Ov],encapsulation:2}),t})(),Ks=(()=>{class t{}return t.\u0275fac=function(n){return new(n||t)},t.\u0275mod=s.oAB({type:t}),t.\u0275inj=s.cJS({imports:[L.m,g.FM,o.aw.forRoot({loader:{provide:o.Zw,useFactory:P,deps:[R.eN]}}),T.Bz.forChild([{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:q,pathMatch:"full",data:{examples:[F,W,Z,H,J,I,B,K,Y,z,hs,V,$,ts,rs,cs,ds,Ts,vs,ks,Ps,qs]}},{path:"api",component:U,pathMatch:"full",data:{content:a(4161)}},{path:"**",redirectTo:"overview"}])]}),t})()},3472:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a basic table extension example.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> \r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>'},8339:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ctrls&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;columnHidable&quot;</span>&gt;</span>Column Hiding<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;columnPinnable&quot;</span>&gt;</span>Column Pinning<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n          [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n          [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n          [<span class="hljs-attr">showToolbar</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n          <span class="hljs-attr">toolbarTitle</span>=<span class="hljs-string">&quot;Mat Table Ext&quot;</span>\r\n          [<span class="hljs-attr">scrollbarH</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n          [<span class="hljs-attr">columnHidable</span>]=<span class="hljs-string">&quot;columnHidable&quot;</span>\r\n          [<span class="hljs-attr">columnPinnable</span>]=<span class="hljs-string">&quot;columnPinnable&quot;</span>\r\n&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n'},3210:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;dragCtrl&quot;</span>&gt;</span>Column Reorder<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span> [<span class="hljs-attr">dndColumns</span>]=<span class="hljs-string">&quot;dragCtrl&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>'},5467:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;columnResizable&quot;</span>&gt;</span>Column Resizable<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n        [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n        [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n        [<span class="hljs-attr">columnResizable</span>]=<span class="hljs-string">&quot;columnResizable&quot;</span>\r\n        [<span class="hljs-attr">scrollbarH</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n        [<span class="hljs-attr">pageSizeOptions</span>]=<span class="hljs-string">&quot;[3,10,15]&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n'},5877:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> \r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    [<span class="hljs-attr">columnFilter</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>'},6809:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n          [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n          [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n          [<span class="hljs-attr">cellTemplateRefMap</span>]=<span class="hljs-string">&quot;{mobile: mobileTpl, city: cityTpl}&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">mobileTpl</span> <span class="hljs-attr">let-row</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">let-index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">let-col</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span>&gt;</span>{{row.mobile}}<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">cityTpl</span> <span class="hljs-attr">let-row</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">let-index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">let-col</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>{{row.city}}<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\r\n'},1927:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n      [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n      [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">statusTpl</span> <span class="hljs-attr">let-row</span>=<span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">let-index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">let-col</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-slide-toggle</span> [<span class="hljs-attr">checked</span>]=<span class="hljs-string">&quot;row.status&quot;</span>&gt;</span>Slide me!<span class="hljs-tag">&lt;/<span class="hljs-name">mat-slide-toggle</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\r\n'},1366:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n      [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n      [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n      [<span class="hljs-attr">headerTemplateRef</span>]=<span class="hljs-string">&quot;headerTpl&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">headerTpl</span> <span class="hljs-attr">let-col</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span>\r\n  {{col.header}} <span class="hljs-tag">&lt;<span class="hljs-name">mat-icon</span> [<span class="hljs-attr">matTooltip</span>]=<span class="hljs-string">&quot;col.description&quot;</span>&gt;</span>info<span class="hljs-tag">&lt;/<span class="hljs-name">mat-icon</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\r\n'},996:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    [<span class="hljs-attr">inlineRowEditing</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n    [<span class="hljs-attr">inlineEditingTemplateRef</span>]=<span class="hljs-string">&quot;inlineEditing&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">inlineEditing</span> <span class="hljs-attr">let-row</span>=<span class="hljs-string">&quot;data.row&quot;</span> <span class="hljs-attr">let-column</span>=<span class="hljs-string">&quot;data.column&quot;</span> <span class="hljs-attr">let-updateData</span>=<span class="hljs-string">&quot;data.updateFunc&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;column.type == &#x27;number&#x27;&quot;</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;outline&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-editing-field&quot;</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[column.field]&quot;</span> [<span class="hljs-attr">ngModelOptions</span>]=<span class="hljs-string">&quot;{standalone: true}&quot;</span>\r\n      (<span class="hljs-attr">ngModelChange</span>)=<span class="hljs-string">&quot;updateData(row)&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;column.type == &#x27;string&#x27;&quot;</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;outline&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-editing-field&quot;</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[column.field]&quot;</span> [<span class="hljs-attr">ngModelOptions</span>]=<span class="hljs-string">&quot;{standalone: true}&quot;</span>\r\n      (<span class="hljs-attr">ngModelChange</span>)=<span class="hljs-string">&quot;updateData(row)&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;column.type == &#x27;date&#x27;&quot;</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;outline&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-editing-field&quot;</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[column.field]&quot;</span> [<span class="hljs-attr">ngModelOptions</span>]=<span class="hljs-string">&quot;{standalone: true}&quot;</span>\r\n      (<span class="hljs-attr">ngModelChange</span>)=<span class="hljs-string">&quot;updateData(row)&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;column.type == &#x27;selection&#x27;&quot;</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;outline&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-editing-field&quot;</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;row[column.field]&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[column.field]&quot;</span> (<span class="hljs-attr">ngModelChange</span>)=<span class="hljs-string">&quot;updateData(row)&quot;</span>\r\n      [<span class="hljs-attr">ngModelOptions</span>]=<span class="hljs-string">&quot;{standalone: true}&quot;</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let option of column.options&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;option&quot;</span>&gt;</span>\r\n        {{option}}\r\n      <span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;$event.stopPropagation()&quot;</span> (<span class="hljs-attr">ngModelChange</span>)=<span class="hljs-string">&quot;updateData(row)&quot;</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;column.type == &#x27;boolean&#x27;&quot;</span>\r\n    <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[column.field]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>'},1693:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    [<span class="hljs-attr">popupRowEditing</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n    [<span class="hljs-attr">popupEditingTemplateRef</span>]=<span class="hljs-string">&quot;popupEditing&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">popupEditing</span> <span class="hljs-attr">let-row</span>=<span class="hljs-string">&quot;data?.row&quot;</span> <span class="hljs-attr">let-column</span>=<span class="hljs-string">&quot;data.columns&quot;</span> <span class="hljs-attr">let-keys</span>=<span class="hljs-string">&quot;data.columnKeys&quot;</span>\r\n  <span class="hljs-attr">let-types</span>=<span class="hljs-string">&quot;data.columnTypes&quot;</span> <span class="hljs-attr">let-close</span>=<span class="hljs-string">&quot;data.closeDialog&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-dialog-container&quot;</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">mat-dialog-title</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog-title-container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;&quot;</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 0;&quot;</span>&gt;</span>Custom Template<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;example-spacer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-icon-button</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Example icon button with a vertical three dot icon&quot;</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-name">mat-icon</span> <span class="hljs-attr">mat-dialog-close</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;cursor: pointer;&quot;</span> <span class="hljs-attr">fxFlex</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>close<span class="hljs-tag">&lt;/<span class="hljs-name">mat-icon</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-dialog-content</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-right: 20px;&quot;</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex; flex-direction: column;&quot;</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let key of keys&quot;</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;types[key] == &#x27;number&#x27;&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;standard&quot;</span>\r\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-editing-field&quot;</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>{{key | titlecase}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[key]&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span> [<span class="hljs-attr">ngModelOptions</span>]=<span class="hljs-string">&quot;{standalone: true}&quot;</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\r\n\r\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;types[key] == &#x27;string&#x27;&quot;</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;standard&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span>\r\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-editing-field&quot;</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>{{key | titlecase}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[key]&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span> [<span class="hljs-attr">ngModelOptions</span>]=<span class="hljs-string">&quot;{standalone: true}&quot;</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;types[key] == &#x27;date&#x27;&quot;</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;standard&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-editing-field&quot;</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>{{key | titlecase}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[key]&quot;</span> [<span class="hljs-attr">ngModelOptions</span>]=<span class="hljs-string">&quot;{standalone: true}&quot;</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;types[key] == &#x27;selection&#x27;&quot;</span> <span class="hljs-attr">appearance</span>=<span class="hljs-string">&quot;standard&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span>\r\n            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inline-editing-field&quot;</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>{{key | titlecase}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[key].value&quot;</span>&gt;</span>\r\n              <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let option of row[key].options&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;option&quot;</span>&gt;</span>\r\n                {{option}}\r\n              <span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;types[key] == &#x27;boolean&#x27;&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;row[key]&quot;</span>&gt;</span>\r\n              <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>{{key | titlecase}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\r\n            <span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\r\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-dialog-content</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-dialog-actions</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 20px;&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;end&quot;</span>&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span> <span class="hljs-attr">mat-dialog-close</span>&gt;</span>\r\n        Cancel\r\n      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\r\n      <span class="hljs-comment">&lt;!-- Must have to provide updated row to mat-dialog-close to update the row in table--&gt;</span>\r\n      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> [<span class="hljs-attr">mat-dialog-close</span>]=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>Save<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-dialog-actions</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\r\n\r\n'},9581:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    [<span class="hljs-attr">showToolbar</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n    [<span class="hljs-attr">toolbarTemplateRef</span>]=<span class="hljs-string">&quot;toolbarTpl&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">toolbarTpl</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\r\n'},9973:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n  [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n  [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n  [<span class="hljs-attr">expandRows</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n  [<span class="hljs-attr">expansionTemplateRef</span>]=<span class="hljs-string">&quot;expansionTpl&quot;</span>\r\n  (<span class="hljs-attr">expansionChange</span>)=<span class="hljs-string">&quot;log($event)&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">expansionTpl</span> <span class="hljs-attr">let-row</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 70px;&quot;</span>&gt;</span>\r\n    {{row.name}}\r\n<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Doloremque libero animi accusantium totam mollitia\r\n  corrupti, illum qui cumque sequi, culpa sunt deleniti, officia quaerat distinctio ipsam velit corporis amet aliquid?\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\r\n'},9679:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> \r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    [<span class="hljs-attr">globalSearch</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>'},9566:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> \r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span> \r\n    [<span class="hljs-attr">showPaginator</span>]=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>'},221:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;rowHover&quot;</span>&gt;</span>Hover<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;rowStriped&quot;</span>&gt;</span>Striped<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n  [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n  [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n  [<span class="hljs-attr">rowHover</span>]=<span class="hljs-string">&quot;rowHover&quot;</span>\r\n  [<span class="hljs-attr">stripedRows</span>]=<span class="hljs-string">&quot;rowStriped&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n'},4816:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;isLoading&quot;</span>&gt;</span>Loading<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n          [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n          [<span class="hljs-attr">loadingIndicator</span>]=<span class="hljs-string">&quot;isLoading&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n'},2123:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;rowSelection&quot;</span>&gt;</span>Row selectable<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;multiple&quot;</span>&gt;</span>Multiple<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    [<span class="hljs-attr">showToolbar</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n    [<span class="hljs-attr">rowSelection</span>]=<span class="hljs-string">&quot;rowSelection&quot;</span>\r\n    [<span class="hljs-attr">multiRowSelection</span>]=<span class="hljs-string">&quot;multiple&quot;</span>\r\n    (<span class="hljs-attr">selectionChanged</span>)=<span class="hljs-string">&quot;log($event)&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n'},2565:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ctrls&quot;</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;inlineEdit&quot;</span>&gt;</span>Inline Edit<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;cellEdit&quot;</span>&gt;</span>Cell Edit<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;popupEdit&quot;</span>&gt;</span>Popup Edit<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;rowDelete&quot;</span>&gt;</span>Delete Row<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span>\r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    [<span class="hljs-attr">enableDelete</span>]=<span class="hljs-string">&quot;rowDelete&quot;</span>\r\n    [<span class="hljs-attr">inCellEditing</span>]=<span class="hljs-string">&quot;cellEdit&quot;</span>\r\n    [<span class="hljs-attr">inlineRowEditing</span>]=<span class="hljs-string">&quot;inlineEdit&quot;</span>\r\n    [<span class="hljs-attr">popupRowEditing</span>]=<span class="hljs-string">&quot;popupEdit&quot;</span>\r\n    &gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n'},5508:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span> [<span class="hljs-attr">sorting</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>'},3640:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ctrls&quot;</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;stickyHeader&quot;</span>&gt;</span>Sticky Header<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;stickyFooter&quot;</span>&gt;</span>Sticky Footer<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\r\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> \r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    <span class="hljs-attr">tableHeight</span>=<span class="hljs-string">&quot;400px&quot;</span>\r\n    [<span class="hljs-attr">showPaginator</span>]=<span class="hljs-string">&quot;false&quot;</span>\r\n    [<span class="hljs-attr">showFooterRow</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n    [<span class="hljs-attr">stickyHeader</span>]=<span class="hljs-string">&quot;stickyHeader&quot;</span>\r\n    [<span class="hljs-attr">stickyFooter</span>]=<span class="hljs-string">&quot;stickyFooter&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>'},3771:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n          [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> #<span class="hljs-attr">grid</span>\r\n          [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n          [<span class="hljs-attr">showToolbar</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n          <span class="hljs-attr">toolbarTitle</span>=<span class="hljs-string">&quot;Mat Table Ext&quot;</span>\r\n          [<span class="hljs-attr">scrollbarH</span>]=<span class="hljs-string">&quot;true&quot;</span>\r\n          [<span class="hljs-attr">exportButtonEnable</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>\r\n'},2093:e=>{e.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-table-ext</span> \r\n    [<span class="hljs-attr">dataSource</span>]=<span class="hljs-string">&quot;list&quot;</span> \r\n    [<span class="hljs-attr">columns</span>]=<span class="hljs-string">&quot;columns&quot;</span>\r\n    <span class="hljs-attr">tableHeight</span>=<span class="hljs-string">&quot;500px&quot;</span>\r\n    [<span class="hljs-attr">showPaginator</span>]=<span class="hljs-string">&quot;false&quot;</span>\r\n    [<span class="hljs-attr">loadingIndicator</span>]=<span class="hljs-string">&quot;isLoading&quot;</span>\r\n    (<span class="hljs-attr">scroll</span>)=<span class="hljs-string">&quot;onScroll($event)&quot;</span>\r\n\r\n\r\n    &gt;</span>\r\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-table-ext</span>&gt;</span>'},9805:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},5092:e=>{e.exports='<span class="hljs-selector-tag">label</span> {\r\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span>;\r\n}\r\n\r\n<span class="hljs-selector-class">.ctrls</span> {\r\n  <span class="hljs-attribute">display</span>: flex;\r\n  <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;\r\n}'},8314:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},9402:e=>{e.exports='<span class="hljs-selector-pseudo">:host</span> ::ng-deep .mat-table-ext {\r\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">280px</span>;\r\n}\r\n'},3556:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},8759:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},7929:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},2980:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},6768:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},2261:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},9662:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},7789:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},1228:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},5184:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},2609:e=>{e.exports='<span class="hljs-selector-class">.mat-checkbox</span> {\r\n  <span class="hljs-attribute">display</span>: inline-block;\r\n  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1rem</span>;\r\n  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;\r\n}\r\n'},9092:e=>{e.exports='<span class="hljs-selector-class">.mat-checkbox</span> {\r\n  <span class="hljs-attribute">display</span>: inline-block;\r\n  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;\r\n}\r\n'},9157:e=>{e.exports='<span class="hljs-selector-class">.mat-checkbox</span>,\r\n<span class="hljs-selector-class">.mat-radio-button</span> {\r\n  <span class="hljs-attribute">display</span>: inline-block;\r\n  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1rem</span>;\r\n  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;\r\n}\r\n'},2929:e=>{e.exports='<span class="hljs-selector-class">.ctrls</span>{\r\n    <span class="hljs-attribute">display</span>: flex;\r\n    <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;\r\n}'},749:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},5406:e=>{e.exports='<span class="hljs-selector-class">.ctrls</span> {\r\n    <span class="hljs-attribute">display</span>: flex;\r\n    <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;\r\n}'},7760:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>'},2942:e=>{e.exports='<span class="hljs-comment">/** No CSS for this example */</span>\r\n'},4048:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span> },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;number&#x27;</span>,\r\n    },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;selection&#x27;</span> ,<span class="hljs-attr">options</span>:[<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Date&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;date&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;date&#x27;</span>\r\n    },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},3276:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">ViewChild</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;grid&#x27;</span>) grid!: <span class="hljs-built_in">any</span>;\r\n\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Position&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;position&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">pinned</span>: <span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">pinned</span>: <span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Symbol&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;symbol&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>,<span class="hljs-attr">options</span>:[<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Tele&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;tele&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Address&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Date&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;date&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Website&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;website&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Company&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;company&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Email&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">pinned</span>: <span class="hljs-string">&#x27;right&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Status&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;boolean&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n\r\n  columnPinnable = <span class="hljs-literal">true</span>;\r\n  columnHidable = <span class="hljs-literal">true</span>;\r\n\r\n  <span class="hljs-title function_">closeMenu</span>(<span class="hljs-params"></span>) {\r\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">grid</span>.<span class="hljs-property">columnMenu</span>.<span class="hljs-property">menuTrigger</span>.<span class="hljs-title function_">closeMenu</span>();\r\n  }\r\n\r\n  <span class="hljs-title function_">log</span>(<span class="hljs-params">e: <span class="hljs-built_in">any</span></span>) {\r\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);\r\n  }\r\n}\r\n'},3340:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;selection&quot;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span> },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span>,\r\n    },\r\n  ];\r\n  dragCtrl = <span class="hljs-literal">false</span>;\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},9626:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>,\r\n      <span class="hljs-attr">minWidth</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,\r\n      <span class="hljs-attr">maxWidth</span>: <span class="hljs-string">&#x27;300px&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span>\r\n    },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>,\r\n      <span class="hljs-attr">minWidth</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,\r\n      <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span>\r\n    },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>,\r\n      <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;100px&#x27;</span>,\r\n      <span class="hljs-attr">resizable</span>: <span class="hljs-literal">false</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span>\r\n    },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>,\r\n      <span class="hljs-attr">maxWidth</span>: <span class="hljs-string">&#x27;px&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span>\r\n    },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>,\r\n      <span class="hljs-attr">minWidth</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span>\r\n    },\r\n  ];\r\n  columnResizable = <span class="hljs-literal">false</span>;\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>([...<span class="hljs-variable constant_">EXAMPLE_DATA</span>, ...<span class="hljs-variable constant_">EXAMPLE_DATA</span>, ...<span class="hljs-variable constant_">EXAMPLE_DATA</span>]);\r\n}\r\n'},570:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span> },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;number&#x27;</span>,\r\n    },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;selection&#x27;</span> ,<span class="hljs-attr">options</span>:[<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Date&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;date&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;date&#x27;</span>\r\n    },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Status&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;status&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;boolean&#x27;</span>\r\n    },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},6056:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},8145:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">OnInit</span>, <span class="hljs-title class_">ViewChild</span>, <span class="hljs-title class_">TemplateRef</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> {\r\n  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;statusTpl&#x27;</span>, { <span class="hljs-attr">static</span>: <span class="hljs-literal">true</span> }) statusTpl!: <span class="hljs-title class_">TemplateRef</span>&lt;<span class="hljs-built_in">any</span>&gt;;\r\n\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n\r\n  <span class="hljs-title function_">ngOnInit</span>(<span class="hljs-params"></span>) {\r\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">columns</span> = [\r\n      { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n      { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n      { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>,<span class="hljs-attr">options</span>:[<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>] },\r\n      { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n      { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n      { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Status&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-attr">cellTemplate</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">statusTpl</span> },\r\n    ];\r\n  }\r\n}\r\n'},3337:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Info about the name&#x27;</span>,<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span>},\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Info about the weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Info about the gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Info about the mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Info about the city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},1687:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA3</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>], },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Cost&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;cost&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA3</span>);\r\n}\r\n'},9617:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>], },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Cost&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;cost&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},687:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Cost&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;cost&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},8070:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">showExpand</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n\r\n  <span class="hljs-title function_">log</span>(<span class="hljs-params">e: <span class="hljs-built_in">any</span></span>) {\r\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);\r\n  }\r\n}\r\n'},7715:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span> },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;number&#x27;</span>,\r\n    },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;selection&#x27;</span> ,<span class="hljs-attr">options</span>:[<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Date&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;date&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;date&#x27;</span>\r\n    },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},8744:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},2657:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>,<span class="hljs-attr">options</span>:[<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n\r\n  rowHover = <span class="hljs-literal">true</span>;\r\n  rowStriped = <span class="hljs-literal">false</span>;\r\n}\r\n'},3083:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/app/models/tableExtModels&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;Male&#x27;</span>, <span class="hljs-string">&#x27;Female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n\r\n  isLoading = <span class="hljs-literal">true</span>;\r\n}\r\n'},9368:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n\r\n  rowSelection = <span class="hljs-literal">true</span>;\r\n  multiple = <span class="hljs-literal">false</span>;\r\n  rowSelected = <span class="hljs-variable constant_">EXAMPLE_DATA</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);\r\n  <span class="hljs-title function_">log</span>(<span class="hljs-params">e: <span class="hljs-built_in">any</span></span>) {\r\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);\r\n  }\r\n}\r\n'},1018:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA3</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span> ,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span>},\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>,<span class="hljs-attr">options</span>:[<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  <span class="hljs-attr">inlineEdit</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;\r\n  <span class="hljs-attr">cellEdit</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;\r\n  <span class="hljs-attr">popupEdit</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;\r\n  <span class="hljs-attr">rowDelete</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">true</span>;\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>([...<span class="hljs-variable constant_">EXAMPLE_DATA3</span>]);\r\n}\r\n'},1265:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;selection&quot;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Mobile&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;mobile&#x27;</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span> },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;City&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>,\r\n      <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;string&quot;</span>,\r\n    },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n\r\n  <span class="hljs-title function_">log</span>(<span class="hljs-params">e: <span class="hljs-built_in">any</span></span>) {\r\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);\r\n  }\r\n}\r\n'},5037:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA2</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Position&#x27;</span>, <span class="hljs-attr">footerText</span>: <span class="hljs-string">&#x27;Position&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;position&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">footerText</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Symbol&#x27;</span>, <span class="hljs-attr">footerText</span>: <span class="hljs-string">&#x27;Symbol&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;symbol&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    {\r\n      <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">footerText</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>,\r\n      <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>,\r\n      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;number&#x27;</span>,\r\n    },\r\n\r\n  ];\r\n  stickyHeader = <span class="hljs-literal">true</span>;\r\n  stickyFooter = <span class="hljs-literal">true</span>\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA2</span>);\r\n}\r\n'},614:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">ViewChild</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-variable constant_">EXAMPLE_DATA</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../data&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Position&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;position&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;weight&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Symbol&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;symbol&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;200px&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>,<span class="hljs-attr">options</span>:[<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;female&#x27;</span>] }\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(<span class="hljs-variable constant_">EXAMPLE_DATA</span>);\r\n}\r\n'},3842:e=>{e.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MTExColumn</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../types&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MatTableDataSource</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/table&#x27;</span>;\r\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">CustomTableService</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/app/service/custom-table.service&#x27;</span>;\r\n\r\n<span class="hljs-meta">@Component</span>({\r\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;data-grid-example&#x27;</span>,\r\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\r\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\r\n})\r\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\r\n  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> service: CustomTableService,</span>) {\r\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadPage</span>(<span class="hljs-number">10</span>);\r\n  }\r\n  <span class="hljs-attr">columns</span>: <span class="hljs-title class_">MTExColumn</span>[] = [\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;ID&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;number&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Name&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Gender&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;gender&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;selection&#x27;</span>, <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;male&#x27;</span>, <span class="hljs-string">&#x27;female&#x27;</span>] },\r\n    { <span class="hljs-attr">header</span>: <span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;string&#x27;</span> },\r\n  ];\r\n\r\n  list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>;\r\n  <span class="hljs-attr">isLoading</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;\r\n  <span class="hljs-title function_">onScroll</span>(<span class="hljs-params">event: <span class="hljs-built_in">any</span></span>) {\r\n    <span class="hljs-keyword">let</span> <span class="hljs-attr">pageLimit</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>;\r\n    <span class="hljs-keyword">let</span> scrollHeight = event.<span class="hljs-property">target</span>.<span class="hljs-property">scrollHeight</span>;\r\n    <span class="hljs-keyword">let</span> scrollTop = event.<span class="hljs-property">target</span>.<span class="hljs-property">scrollTop</span>;\r\n    <span class="hljs-keyword">let</span> clientHeight = event.<span class="hljs-property">target</span>.<span class="hljs-property">clientHeight</span>;\r\n    <span class="hljs-keyword">let</span> scrollPosition = scrollHeight - (scrollTop + clientHeight);\r\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;scrollPosition&#x27;</span>, scrollPosition);\r\n    <span class="hljs-keyword">if</span> (scrollPosition &lt;= <span class="hljs-number">5</span>) {\r\n      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadPage</span>(pageLimit);\r\n    }\r\n  }\r\n  <span class="hljs-title function_">loadPage</span>(<span class="hljs-params">limit: <span class="hljs-built_in">number</span></span>) {\r\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLoading</span> = <span class="hljs-literal">true</span>;\r\n    <span class="hljs-keyword">let</span> offset = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">data</span>.<span class="hljs-property">length</span> : <span class="hljs-number">0</span>;\r\n    <span class="hljs-variable language_">this</span>.<span class="hljs-property">service</span>.<span class="hljs-title function_">getResults</span>(offset, limit).<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">results</span> =&gt;</span> {\r\n      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>) {\r\n        <span class="hljs-keyword">const</span> rows = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">data</span>, ...results.<span class="hljs-property">data</span>];\r\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(rows);\r\n      }\r\n      <span class="hljs-keyword">else</span> {\r\n        <span class="hljs-keyword">const</span> rows = [...results.<span class="hljs-property">data</span>];\r\n        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MatTableDataSource</span>(rows);\r\n      }\r\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLoading</span> = <span class="hljs-literal">false</span>;\r\n    });\r\n  }\r\n}\r\n'},4161:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<h1 id="mat-table-ext">Mat Table Ext</h1>\n<h3 id="directives">Directives</h3>\n<h4 id="mattableext"><code>MatTableExt</code></h4>\n<p>Selector: <code>[mat-table-ext]</code></p>\n<p>Exported as: <code>MatTableExt</code></p>\n<h5 id="properties"><strong>Properties</strong></h5>\n<h6 id="basic"><strong>Basic</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>columns: MTExColumn[]</code></td>\n<td align="left">The table&apos;s columns.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>dataSource: MatTableDataSource[]</code></td>\n<td align="left">The table&apos;s data.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>loadingIdicator: boolean</code></td>\n<td align="left">Whether the table&apos;s data is loading. Default is <strong><code>false</code></strong>.</td>\n</tr>\n</tbody></table>\n<h6 id="page"><strong>Page</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>showPaginator: boolean</code></td>\n<td align="left">Whether to show the paginator. Default is <strong><code>true</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>showFirstLastButtons: boolean</code></td>\n<td align="left">Whether to show the first/last buttons UI to the user. Default is <strong><code>true</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>pageSizeOptions: number[]</code></td>\n<td align="left">The set of provided page size options to display to the user. Default is <strong><code>[10, 50, 100]</code></strong></td>\n</tr>\n<tr>\n<td align="left"><code>@Output()</code><br><code>scroll : EventEmitter&lt;any&gt;</code></td>\n<td align="left">The set of provided page size options to display to the user</td>\n</tr>\n</tbody></table>\n<h6 id="sort"><strong>Sort</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>sorting: boolean</code></td>\n<td align="left">Sorting for table columns. Default is <strong><code>false</code></strong>.</td>\n</tr>\n</tbody></table>\n<h6 id="expansion"><strong>Expansion</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>expandRows: boolean</code></td>\n<td align="left">Whether the row is expandable. Default is <strong><code>false</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>expansionTemplateRef: TemplateRef&lt;any&gt;</code></td>\n<td align="left">The template for the expandable row.</td>\n</tr>\n<tr>\n<td align="left"><code>@Output()</code><br><code>expansionChange: EventEmitter&lt;any&gt;</code></td>\n<td align="left">Event emitted when the user toggles the expandable row.</td>\n</tr>\n</tbody></table>\n<h6 id="selection"><strong>Selection</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>multiSelectable: boolean</code></td>\n<td align="left">Whether to support multiple row selection. Default is <strong><code>true</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>rowSelection: boolean</code></td>\n<td align="left">Whether the row is selectable. Default is <strong><code>false</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Output()</code><br><code>selectionChanged: EventEmitter&lt;any&gt;</code></td>\n<td align="left">Event emitted when the row is selected.</td>\n</tr>\n</tbody></table>\n<h6 id="toolbar"><strong>Toolbar</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>showToolbar: boolean</code></td>\n<td align="left">Whether to show the toolbar. Default is <strong><code>false</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>toolbarTitle: string</code></td>\n<td align="left">The text of the toolbar&apos;s title. Default is <strong><code>&apos;&apos;</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>toolbarTemplate: TemplateRef&lt;any&gt;</code></td>\n<td align="left">The template for the toolbar .</td>\n</tr>\n</tbody></table>\n<h6 id="column"><strong>Column</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>columnHideable: boolean</code></td>\n<td align="left">Whether the column is hideable. Default is <strong><code>false</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>columnPinnable: boolean</code></td>\n<td align="left">Whether the column is pinnable. Default is <strong><code>false</code></strong>.</td>\n</tr>\n</tbody></table>\n<h6 id="row"><strong>Row</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>rowHover: boolean</code></td>\n<td align="left">Whether to use the row hover style. Default is <strong><code>false</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>stripedRows: boolean</code></td>\n<td align="left">Whether to use the row striped style. Default is <strong><code>false</code></strong>.</td>\n</tr>\n</tbody></table>\n<h6 id="cell-templates"><strong>Cell templates</strong></h6>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>headerTemplateRef: TemplateRef&lt;any&gt;</code></td>\n<td align="left">The header&apos;s cell template for the table.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>cellTemplateRef: TemplateRef&lt;any&gt;</code></td>\n<td align="left">The cell template for the table.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>cellTemplateRefMap: TemplateRef&lt;any&gt;</code></td>\n<td align="left">The cell template for the table when you want template for more columns.</td>\n</tr>\n</tbody></table>\n<h3 id="interfaces"><strong>Interfaces</strong></h3>\n<h4 id="mtexcolumn"><code>MTExColumn</code></h4>\n<pre class="hljs"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MTExColumn</span> {\n  <span class="hljs-attr">field</span>: <span class="hljs-built_in">string</span>;\n  header?: <span class="hljs-built_in">string</span> ;\n  disabled?: <span class="hljs-built_in">boolean</span>;\n  width?: <span class="hljs-built_in">string</span>;\n  minWidth?: <span class="hljs-built_in">number</span>;\n  maxWidth?: <span class="hljs-built_in">number</span>;\n  <span class="hljs-attr">type</span>: <span class="hljs-title class_">MTExColumnType</span>;\n  options?: <span class="hljs-built_in">string</span>[] ;\n  header?: <span class="hljs-built_in">string</span> ;\n  name?: <span class="hljs-built_in">string</span>;\n  footerText?: <span class="hljs-built_in">string</span>;\n  headerTooltip?: <span class="hljs-built_in">string</span>;\n  cellTooltip?: <span class="hljs-built_in">string</span>;\n}\n</pre>\n<h3 id="type-aliases">Type aliases</h3>\n<h4 id="mtexcolumntype"><code>MTExColumnType</code></h4>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">MTExColumnType</span> = <span class="hljs-string">&apos;selection&apos;</span> | <span class="hljs-string">&apos;string&apos;</span> | <span class="hljs-string">&apos;boolean&apos;</span> | <span class="hljs-string">&apos;number&apos;</span>  | <span class="hljs-string">&apos;date&apos;</span>;;\n</pre>\n'},4336:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<p>This is a basic table extension example.</p>\r\n<mat-table-ext \r\n    [dataSource]="list" \r\n    [columns]="columns">\r\n</mat-table-ext>'},6223:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},962:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name',type:'string' },\r\n    {\r\n      header: 'Weight',\r\n      field: 'weight',\r\n      type: 'number',\r\n    },\r\n    { header: 'Gender', field: 'gender', type:'selection' ,options:['male','female'] },\r\n    { header: 'Mobile', field: 'mobile',type:'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n    {\r\n      header: 'Date',\r\n      field: 'date',\r\n      type: 'date'\r\n    },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},8076:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<div class="ctrls">\r\n  <mat-checkbox [(ngModel)]="columnHidable">Column Hiding</mat-checkbox>\r\n  <mat-checkbox [(ngModel)]="columnPinnable">Column Pinning</mat-checkbox>\r\n</div>\r\n\r\n<mat-table-ext \r\n          [dataSource]="list"\r\n          [columns]="columns"\r\n          [showToolbar]="true"\r\n          toolbarTitle="Mat Table Ext"\r\n          [scrollbarH]="true"\r\n          [columnHidable]="columnHidable"\r\n          [columnPinnable]="columnPinnable"\r\n>\r\n</mat-table-ext>\r\n'},9337:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="label {\r\n  padding: 0 8px;\r\n}\r\n\r\n.ctrls {\r\n  display: flex;\r\n  gap: 10px;\r\n}"},1741:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component, ViewChild } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MTExColumn } from '../../types';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  @ViewChild('grid') grid!: any;\r\n\r\n  columns: MTExColumn[] = [\r\n    { header: 'Position', field: 'position', width: '200px',type:'string' },\r\n    { header: 'Name', field: 'name', width: '200px', pinned: 'left', type: 'string' },\r\n    { header: 'Weight', field: 'weight', width: '200px', pinned: 'left', type: 'string' },\r\n    { header: 'Symbol', field: 'symbol', width: '200px', type: 'string' },\r\n    { header: 'Gender', field: 'gender', width: '200px', type: 'selection',options:['male','female'] },\r\n    { header: 'Mobile', field: 'mobile', width: '200px', type: 'string' },\r\n    { header: 'Tele', field: 'tele', width: '200px', type: 'string' },\r\n    { header: 'City', field: 'city', width: '200px', type: 'string' },\r\n    { header: 'Address', field: 'address', width: '200px', type: 'string' },\r\n    { header: 'Date', field: 'date', width: '200px', type: 'string' },\r\n    { header: 'Website', field: 'website', width: '200px', type: 'string' },\r\n    { header: 'Company', field: 'company', width: '200px', type: 'string' },\r\n    { header: 'Email', field: 'email', width: '200px', pinned: 'right', type: 'string' },\r\n    { header: 'Status', field: 'status', type: 'boolean', width: '200px' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n\r\n  columnPinnable = true;\r\n  columnHidable = true;\r\n\r\n  closeMenu() {\r\n    this.grid.columnMenu.menuTrigger.closeMenu();\r\n  }\r\n\r\n  log(e: any) {\r\n    console.log(e);\r\n  }\r\n}\r\n"},7581:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-checkbox [(ngModel)]="dragCtrl">Column Reorder</mat-checkbox>\r\n<mat-table-ext [dataSource]="list" [columns]="columns" [dndColumns]="dragCtrl">\r\n</mat-table-ext>'},8332:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},9189:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', type: \"string\" },\r\n    { header: 'Weight', field: 'weight', type: \"string\" },\r\n    { header: 'Gender', field: 'gender', type: \"selection\", options: ['male', 'female'] },\r\n    { header: 'Mobile', field: 'mobile', type: \"string\" },\r\n    {\r\n      header: 'City',\r\n      field: 'city',\r\n      type: \"string\",\r\n    },\r\n  ];\r\n  dragCtrl = false;\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},9821:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-checkbox [(ngModel)]="columnResizable">Column Resizable</mat-checkbox>\r\n<mat-table-ext \r\n        [dataSource]="list"\r\n        [columns]="columns"\r\n        [columnResizable]="columnResizable"\r\n        [scrollbarH]="true"\r\n        [pageSizeOptions]="[3,10,15]">\r\n</mat-table-ext>\r\n'},7678:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o=":host ::ng-deep .mat-table-ext {\r\n  height: 280px;\r\n}\r\n"},3120:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    {\r\n      header: 'Name',\r\n      field: 'name',\r\n      minWidth: '200px',\r\n      maxWidth: '300px',\r\n      type: 'string'\r\n    },\r\n    {\r\n      header: 'Weight',\r\n      field: 'weight',\r\n      minWidth: '200px',\r\n      type:'string'\r\n    },\r\n    {\r\n      header: 'Gender',\r\n      field: 'gender',\r\n      width: '100px',\r\n      resizable: false,\r\n      type: 'string'\r\n    },\r\n    {\r\n      header: 'Mobile',\r\n      field: 'mobile',\r\n      maxWidth: 'px',\r\n      type: 'string'\r\n    },\r\n    {\r\n      header: 'City',\r\n      field: 'city',\r\n      minWidth: '200px',\r\n      type: 'string'\r\n    },\r\n  ];\r\n  columnResizable = false;\r\n  list = new MatTableDataSource([...EXAMPLE_DATA, ...EXAMPLE_DATA, ...EXAMPLE_DATA]);\r\n}\r\n"},3361:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n    [dataSource]="list" \r\n    [columns]="columns"\r\n    [columnFilter]="true">\r\n</mat-table-ext>'},3109:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},9472:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name',type:'string' },\r\n    {\r\n      header: 'Weight',\r\n      field: 'weight',\r\n      type: 'number',\r\n    },\r\n    { header: 'Gender', field: 'gender', type:'selection' ,options:['male','female'] },\r\n    {\r\n      header: 'Date',\r\n      field: 'date',\r\n      type: 'date'\r\n    },\r\n    {\r\n      header: 'Status',\r\n      field: 'status',\r\n      type: 'boolean'\r\n    },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},2585:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n          [dataSource]="list"\r\n          [columns]="columns"\r\n          [cellTemplateRefMap]="{mobile: mobileTpl, city: cityTpl}">\r\n</mat-table-ext>\r\n\r\n<ng-template #mobileTpl let-row="row" let-index="index" let-col="column">\r\n  <button mat-raised-button color="accent">{{row.mobile}}</button>\r\n</ng-template>\r\n\r\n<ng-template #cityTpl let-row="row" let-index="index" let-col="column">\r\n  <button mat-raised-button color="primary">{{row.city}}</button>\r\n</ng-template>\r\n'},9743:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},295:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['male', 'female'] },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},635:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n      [dataSource]="list"\r\n      [columns]="columns">\r\n</mat-table-ext>\r\n\r\n<ng-template #statusTpl let-row="row" let-index="index" let-col="column">\r\n  <mat-slide-toggle [checked]="row.status">Slide me!</mat-slide-toggle>\r\n</ng-template>\r\n'},1607:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},2472:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component, OnInit, ViewChild, TemplateRef } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  @ViewChild('statusTpl', { static: true }) statusTpl!: TemplateRef<any>;\r\n\r\n  columns: MTExColumn[] = [];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n\r\n  ngOnInit() {\r\n    this.columns = [\r\n      { header: 'Name', field: 'name', type: 'string' },\r\n      { header: 'Weight', field: 'weight', type: 'string' },\r\n      { header: 'Gender', field: 'gender', type: 'selection',options:['male','female'] },\r\n      { header: 'Mobile', field: 'mobile', type: 'string' },\r\n      { header: 'City', field: 'city', type: 'string' },\r\n      { header: 'Status', field: 'status', type: 'string', cellTemplate: this.statusTpl },\r\n    ];\r\n  }\r\n}\r\n"},6944:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n      [dataSource]="list"\r\n      [columns]="columns"\r\n      [headerTemplateRef]="headerTpl">\r\n</mat-table-ext>\r\n\r\n<ng-template #headerTpl let-col="data">\r\n  {{col.header}} <mat-icon [matTooltip]="col.description">info</mat-icon>\r\n</ng-template>\r\n'},8484:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},2346:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MTExColumn } from '../../types';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', description: 'Info about the name',type: 'string'},\r\n    { header: 'Weight', field: 'weight', description: 'Info about the weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', description: 'Info about the gender', type: 'string' },\r\n    { header: 'Mobile', field: 'mobile', description: 'Info about the mobile', type: 'string' },\r\n    { header: 'City', field: 'city', description: 'Info about the city', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},7295:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n    [dataSource]="list"\r\n    [columns]="columns"\r\n    [inlineRowEditing]="true"\r\n    [inlineEditingTemplateRef]="inlineEditing">\r\n</mat-table-ext>\r\n\r\n<ng-template #inlineEditing let-row="data.row" let-column="data.column" let-updateData="data.updateFunc">\r\n  <mat-form-field *ngIf="column.type == \'number\'" appearance="outline" class="inline-editing-field">\r\n    <input matInput type="number" [(ngModel)]="row[column.field]" [ngModelOptions]="{standalone: true}"\r\n      (ngModelChange)="updateData(row)">\r\n  </mat-form-field>\r\n  <mat-form-field *ngIf="column.type == \'string\'" appearance="outline" class="inline-editing-field">\r\n    <input matInput type="text" [(ngModel)]="row[column.field]" [ngModelOptions]="{standalone: true}"\r\n      (ngModelChange)="updateData(row)">\r\n  </mat-form-field>\r\n  <mat-form-field *ngIf="column.type == \'date\'" appearance="outline" class="inline-editing-field">\r\n    <input matInput type="date" [(ngModel)]="row[column.field]" [ngModelOptions]="{standalone: true}"\r\n      (ngModelChange)="updateData(row)">\r\n  </mat-form-field>\r\n  <mat-form-field *ngIf="column.type == \'selection\'" appearance="outline" class="inline-editing-field">\r\n    <mat-select [value]="row[column.field]" [(ngModel)]="row[column.field]" (ngModelChange)="updateData(row)"\r\n      [ngModelOptions]="{standalone: true}">\r\n      <mat-option *ngFor="let option of column.options" [value]="option">\r\n        {{option}}\r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <mat-checkbox (click)="$event.stopPropagation()" (ngModelChange)="updateData(row)" *ngIf="column.type == \'boolean\'"\r\n    color="primary" [(ngModel)]="row[column.field]"></mat-checkbox>\r\n</ng-template>'},1761:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},7641:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA3 } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['male', 'female'], },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n    { header: 'Cost', field: 'cost', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA3);\r\n}\r\n"},6074:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n    [dataSource]="list"\r\n    [columns]="columns"\r\n    [popupRowEditing]="true"\r\n    [popupEditingTemplateRef]="popupEditing">\r\n</mat-table-ext>\r\n\r\n<ng-template #popupEditing let-row="data?.row" let-column="data.columns" let-keys="data.columnKeys"\r\n  let-types="data.columnTypes" let-close="data.closeDialog">\r\n  <div style="height: 100%;" class="main-dialog-container">\r\n    <div mat-dialog-title class="dialog-title-container" style="display: flex;">\r\n      <h2 style="margin: 0;">Custom Template</h2>\r\n      <span class="example-spacer"></span>\r\n      <button mat-icon-button aria-label="Example icon button with a vertical three dot icon">\r\n        <mat-icon mat-dialog-close style="cursor: pointer;" fxFlex="5">close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <mat-dialog-content style="margin-right: 20px;">\r\n      <div style="display: flex; flex-direction: column;">\r\n        <ng-container *ngFor="let key of keys">\r\n          <mat-form-field *ngIf="types[key] == \'number\'" color="accent" appearance="standard"\r\n            class="inline-editing-field">\r\n            <mat-label>{{key | titlecase}}</mat-label>\r\n            <input matInput type="number" [(ngModel)]="row[key]" color="accent" [ngModelOptions]="{standalone: true}">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field *ngIf="types[key] == \'string\'" appearance="standard" color="accent"\r\n            class="inline-editing-field">\r\n            <mat-label>{{key | titlecase}}</mat-label>\r\n            <input matInput type="text" [(ngModel)]="row[key]" color="accent" [ngModelOptions]="{standalone: true}">\r\n          </mat-form-field>\r\n          <mat-form-field *ngIf="types[key] == \'date\'" appearance="standard" color="accent" class="inline-editing-field">\r\n            <mat-label>{{key | titlecase}}</mat-label>\r\n            <input matInput type="text" [(ngModel)]="row[key]" [ngModelOptions]="{standalone: true}">\r\n          </mat-form-field>\r\n          <mat-form-field *ngIf="types[key] == \'selection\'" appearance="standard" color="accent"\r\n            class="inline-editing-field">\r\n            <mat-label>{{key | titlecase}}</mat-label>\r\n            <mat-select [(ngModel)]="row[key].value">\r\n              <mat-option *ngFor="let option of row[key].options" [value]="option">\r\n                {{option}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n          <p>\r\n            <mat-checkbox *ngIf="types[key] == \'boolean\'" color="accent" [(ngModel)]="row[key]">\r\n              <mat-label>{{key | titlecase}}</mat-label>\r\n            </mat-checkbox>\r\n          </p>\r\n        </ng-container>\r\n      </div>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions style="margin-top: 20px;" align="end">\r\n      <button mat-raised-button color="accent" mat-dialog-close>\r\n        Cancel\r\n      </button>\r\n      \x3c!-- Must have to provide updated row to mat-dialog-close to update the row in table--\x3e\r\n      <button mat-raised-button color="primary" [mat-dialog-close]="row">Save</button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n</ng-template>\r\n\r\n'},2132:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},4092:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['male', 'female'], },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n    { header: 'Cost', field: 'cost', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},486:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n    [dataSource]="list"\r\n    [columns]="columns"\r\n    [showToolbar]="true"\r\n    [toolbarTemplateRef]="toolbarTpl">\r\n</mat-table-ext>\r\n\r\n<ng-template #toolbarTpl>\r\n  <input placeholder="Search">\r\n</ng-template>\r\n'},4e3:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},7861:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['male', 'female'] },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n    { header: 'Cost', field: 'cost', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},8644:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n  [dataSource]="list"\r\n  [columns]="columns"\r\n  [expandRows]="true"\r\n  [expansionTemplateRef]="expansionTpl"\r\n  (expansionChange)="log($event)">\r\n</mat-table-ext>\r\n\r\n<ng-template #expansionTpl let-row="row">\r\n  <div style="height: 70px;">\r\n    {{row.name}}\r\n<p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Doloremque libero animi accusantium totam mollitia\r\n  corrupti, illum qui cumque sequi, culpa sunt deleniti, officia quaerat distinctio ipsam velit corporis amet aliquid?\r\n</p>\r\n  </div>\r\n</ng-template>\r\n'},6982:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},5865:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', showExpand: true, type: 'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['male', 'female'] },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n\r\n  log(e: any) {\r\n    console.log(e);\r\n  }\r\n}\r\n"},7809:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n    [dataSource]="list" \r\n    [columns]="columns"\r\n    [globalSearch]="true">\r\n</mat-table-ext>'},4148:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},249:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name',type:'string' },\r\n    {\r\n      header: 'Weight',\r\n      field: 'weight',\r\n      type: 'number',\r\n    },\r\n    { header: 'Gender', field: 'gender', type:'selection' ,options:['male','female'] },\r\n    { header: 'Mobile', field: 'mobile',type:'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n    {\r\n      header: 'Date',\r\n      field: 'date',\r\n      type: 'date'\r\n    },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},7231:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n    [dataSource]="list" \r\n    [columns]="columns" \r\n    [showPaginator]="false">\r\n</mat-table-ext>'},629:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},4043:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['male', 'female'] },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},1244:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<div>\r\n  <mat-checkbox [(ngModel)]="rowHover">Hover</mat-checkbox>\r\n  <mat-checkbox [(ngModel)]="rowStriped">Striped</mat-checkbox>\r\n</div>\r\n\r\n<mat-table-ext \r\n  [dataSource]="list"\r\n  [columns]="columns"\r\n  [rowHover]="rowHover"\r\n  [stripedRows]="rowStriped">\r\n</mat-table-ext>\r\n'},4047:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o=".mat-checkbox {\r\n  display: inline-block;\r\n  margin-right: 1rem;\r\n  margin-bottom: 1rem;\r\n}\r\n"},6639:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name',type:'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection',options:['male','female'] },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n\r\n  rowHover = true;\r\n  rowStriped = false;\r\n}\r\n"},3899:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-checkbox [(ngModel)]="isLoading">Loading</mat-checkbox>\r\n\r\n<mat-table-ext [dataSource]="list"\r\n          [columns]="columns"\r\n          [loadingIndicator]="isLoading">\r\n</mat-table-ext>\r\n'},7097:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o=".mat-checkbox {\r\n  display: inline-block;\r\n  margin-bottom: 1rem;\r\n}\r\n"},8121:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from 'src/app/models/tableExtModels';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['Male', 'Female'] },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n\r\n  isLoading = true;\r\n}\r\n"},162:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<div>\r\n  <mat-checkbox [(ngModel)]="rowSelection">Row selectable</mat-checkbox>\r\n  <mat-checkbox [(ngModel)]="multiple">Multiple</mat-checkbox>\r\n</div>\r\n\r\n<mat-table-ext \r\n    [dataSource]="list"\r\n    [columns]="columns"\r\n    [showToolbar]="true"\r\n    [rowSelection]="rowSelection"\r\n    [multiRowSelection]="multiple"\r\n    (selectionChanged)="log($event)">\r\n</mat-table-ext>\r\n'},7026:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o=".mat-checkbox,\r\n.mat-radio-button {\r\n  display: inline-block;\r\n  margin-right: 1rem;\r\n  margin-bottom: 1rem;\r\n}\r\n"},5761:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['male', 'female'] },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n\r\n  rowSelection = true;\r\n  multiple = false;\r\n  rowSelected = EXAMPLE_DATA.slice(2, 3);\r\n  log(e: any) {\r\n    console.log(e);\r\n  }\r\n}\r\n"},9099:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<div class="ctrls">\r\n    <mat-checkbox [(ngModel)]="inlineEdit">Inline Edit</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]="cellEdit">Cell Edit</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]="popupEdit">Popup Edit</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]="rowDelete">Delete Row</mat-checkbox>\r\n</div>\r\n<mat-table-ext \r\n    [dataSource]="list"\r\n    [columns]="columns"\r\n    [enableDelete]="rowDelete"\r\n    [inCellEditing]="cellEdit"\r\n    [inlineRowEditing]="inlineEdit"\r\n    [popupRowEditing]="popupEdit"\r\n    >\r\n</mat-table-ext>\r\n'},3390:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o=".ctrls{\r\n    display: flex;\r\n    gap: 10px;\r\n}"},8357:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA3 } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name' ,type:'string'},\r\n    { header: 'Weight', field: 'weight', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection',options:['male','female'] },\r\n    { header: 'Mobile', field: 'mobile', type: 'string' },\r\n    { header: 'City', field: 'city', type: 'string' },\r\n  ];\r\n\r\n  inlineEdit: boolean = true;\r\n  cellEdit: boolean = true;\r\n  popupEdit: boolean = true;\r\n  rowDelete: boolean = true;\r\n  list = new MatTableDataSource([...EXAMPLE_DATA3]);\r\n}\r\n"},5705:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext [dataSource]="list" [columns]="columns" [sorting]="true">\r\n</mat-table-ext>'},3960:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},3350:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Name', field: 'name', sortable: true, type: \"string\" },\r\n    { header: 'Weight', field: 'weight', sortable: true, type: \"string\" },\r\n    { header: 'Gender', field: 'gender', sortable: true, type: \"selection\", options: ['male', 'female'] },\r\n    { header: 'Mobile', field: 'mobile', sortable: false, type: \"string\" },\r\n    {\r\n      header: 'City',\r\n      field: 'city',\r\n      sortable: true,\r\n      type: \"string\",\r\n    },\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n\r\n  log(e: any) {\r\n    console.log(e);\r\n  }\r\n}\r\n"},9735:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<div class="ctrls">\r\n    <mat-checkbox [(ngModel)]="stickyHeader">Sticky Header</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]="stickyFooter">Sticky Footer</mat-checkbox>\r\n</div>\r\n<mat-table-ext \r\n    [dataSource]="list" \r\n    [columns]="columns"\r\n    tableHeight="400px"\r\n    [showPaginator]="false"\r\n    [showFooterRow]="true"\r\n    [stickyHeader]="stickyHeader"\r\n    [stickyFooter]="stickyFooter">\r\n</mat-table-ext>'},7339:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o=".ctrls {\r\n    display: flex;\r\n    gap: 10px;\r\n}"},2893:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { EXAMPLE_DATA2 } from '../../data';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Position', footerText: 'Position', field: 'position', type: 'string' },\r\n    { header: 'Name', footerText: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Symbol', footerText: 'Symbol', field: 'symbol', type: 'string' },\r\n    {\r\n      header: 'Weight', footerText: 'Weight',\r\n      field: 'weight',\r\n      type: 'number',\r\n    },\r\n\r\n  ];\r\n  stickyHeader = true;\r\n  stickyFooter = true\r\n  list = new MatTableDataSource(EXAMPLE_DATA2);\r\n}\r\n"},2124:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n          [dataSource]="list" #grid\r\n          [columns]="columns"\r\n          [showToolbar]="true"\r\n          toolbarTitle="Mat Table Ext"\r\n          [scrollbarH]="true"\r\n          [exportButtonEnable]="true">\r\n</mat-table-ext>\r\n'},7104:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */"},5373:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component, ViewChild } from '@angular/core';\r\nimport { EXAMPLE_DATA } from '../../data';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MTExColumn } from '../../types';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  columns: MTExColumn[] = [\r\n    { header: 'Position', field: 'position', width: '200px',type:'string' },\r\n    { header: 'Name', field: 'name', width: '200px', type: 'string' },\r\n    { header: 'Weight', field: 'weight', width: '200px', type: 'string' },\r\n    { header: 'Symbol', field: 'symbol', width: '200px', type: 'string' },\r\n    { header: 'Gender', field: 'gender', width: '200px', type: 'selection',options:['male','female'] }\r\n  ];\r\n\r\n  list = new MatTableDataSource(EXAMPLE_DATA);\r\n}\r\n"},5582:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o='<mat-table-ext \r\n    [dataSource]="list" \r\n    [columns]="columns"\r\n    tableHeight="500px"\r\n    [showPaginator]="false"\r\n    [loadingIndicator]="isLoading"\r\n    (scroll)="onScroll($event)"\r\n\r\n\r\n    >\r\n</mat-table-ext>'},8160:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="/** No CSS for this example */\r\n"},8701:(e,l,a)=>{"use strict";a.r(l),a.d(l,{default:()=>o});const o="import { Component } from '@angular/core';\r\nimport { MTExColumn } from '../../types';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { CustomTableService } from 'src/app/service/custom-table.service';\r\n\r\n@Component({\r\n  selector: 'data-grid-example',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  constructor(public service: CustomTableService,) {\r\n    this.loadPage(10);\r\n  }\r\n  columns: MTExColumn[] = [\r\n    { header: 'ID', field: 'id', type: 'number' },\r\n    { header: 'Name', field: 'name', type: 'string' },\r\n    { header: 'Gender', field: 'gender', type: 'selection', options: ['male', 'female'] },\r\n    { header: 'Age', field: 'age', type: 'string' },\r\n  ];\r\n\r\n  list = new MatTableDataSource;\r\n  isLoading: boolean = false;\r\n  onScroll(event: any) {\r\n    let pageLimit: number = 10;\r\n    let scrollHeight = event.target.scrollHeight;\r\n    let scrollTop = event.target.scrollTop;\r\n    let clientHeight = event.target.clientHeight;\r\n    let scrollPosition = scrollHeight - (scrollTop + clientHeight);\r\n    console.log('scrollPosition', scrollPosition);\r\n    if (scrollPosition <= 5) {\r\n      this.loadPage(pageLimit);\r\n    }\r\n  }\r\n  loadPage(limit: number) {\r\n    this.isLoading = true;\r\n    let offset = this.list ? this.list.data.length : 0;\r\n    this.service.getResults(offset, limit).subscribe(results => {\r\n      if (this.list) {\r\n        const rows = [...this.list.data, ...results.data];\r\n        this.list = new MatTableDataSource(rows);\r\n      }\r\n      else {\r\n        const rows = [...results.data];\r\n        this.list = new MatTableDataSource(rows);\r\n      }\r\n      this.isLoading = false;\r\n    });\r\n  }\r\n}\r\n"}}]);